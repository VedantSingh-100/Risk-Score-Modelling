diff --git a/.gitignore b/.gitignore
index 0d509e2..8a085b7 100644
--- a/.gitignore
+++ b/.gitignore
@@ -46,3 +46,4 @@ slurm-*.err
 *.csv
 !configs/*.csv
 !data/processed/*.csv
+
diff --git a/README.md b/README.md
index 4acb773..0b525af 100644
--- a/README.md
+++ b/README.md
@@ -166,3 +166,4 @@ models:
 ## 📞 Contact
 
 [Add contact information here]
+
diff --git a/configs/training_config.yaml b/configs/training_config.yaml
index ed400ee..48d7f92 100644
--- a/configs/training_config.yaml
+++ b/configs/training_config.yaml
@@ -53,3 +53,4 @@ models:
 output:
   baselines_dir: "artifacts/reports/baselines"
   boosters_dir: "artifacts/reports/boosters"
+
diff --git a/data/processed/y_label.csv b/data/processed/y_label.csv
index 0b2d850..bb3dfe5 100644
--- a/data/processed/y_label.csv
+++ b/data/processed/y_label.csv
@@ -1,1423 +1,480 @@
 label
 0
-1
-1
-1
 0
 0
 0
 0
-1
-1
-1
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
 1
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
 0
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
 0
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
 0
 0
 0
@@ -1425,7289 +482,2311 @@ label
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
 0
 0
 0
-1
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
 0
 0
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
 0
 0
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
 0
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
 0
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
 0
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
 0
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
-1
 0
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
 0
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
 0
 0
 0
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
-1
 0
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
 0
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
 0
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
-1
-1
 0
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
 0
 0
 0
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
 0
 0
 0
@@ -8716,2159 +2795,697 @@ label
 0
 0
 0
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
 0
 0
 0
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
-1
-1
 0
-1
 0
-1
 0
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
 0
 0
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
-1
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
 0
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
 0
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
-1
-1
-1
 0
 0
 0
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
 0
-1
 0
-1
-1
 0
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
 0
-1
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
 0
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
@@ -10876,4527 +3493,25910 @@ label
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
 0
 0
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
 0
-1
 0
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
-1
-1
 0
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
 0
 0
 0
-1
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
-1
 0
 0
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
 0
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
-1
-1
 0
-1
 0
 0
 0
-1
-1
 0
 0
-1
-1
-1
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
 0
-1
 0
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
 0
 0
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
 0
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
 0
 0
 0
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
-1
-1
-1
-1
-1
 0
 0
 0
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
-1
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
-1
 0
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+1
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+1
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+1
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+1
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+1
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+1
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+1
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+1
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+1
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+1
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+1
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+1
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+1
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+1
+0
+1
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+1
+1
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+1
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+1
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+1
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+1
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+1
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+1
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+1
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+1
+0
+0
+1
+0
+0
+0
+0
+1
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+1
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+1
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+1
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+1
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+1
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+1
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+1
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+1
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
 0
 1
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
 1
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
 0
 0
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
@@ -15404,3688 +29404,2291 @@ label
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
 0
-1
 0
-1
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
+0
 0
 0
 1
-1
 0
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
 0
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
-1
 0
-1
-1
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
-1
 0
-1
-1
-1
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
-1
 0
 0
 0
-1
-1
-1
 0
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
 0
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
 0
 0
 0
-1
-1
-1
 0
-1
 0
-1
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
 0
 0
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
-1
-1
-1
 0
-1
 0
 0
 0
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
 0
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
-1
-1
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
+0
+0
+0
+0
+0
+0
+0
 0
 1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
 0
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
 0
 0
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
 0
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
 0
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
 0
@@ -19093,920 +31696,315 @@ label
 0
 0
 0
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
 0
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
+0
 0
 0
 1
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
 0
 0
 0
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
 0
 0
 0
-1
-1
-1
-1
 0
 0
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
 0
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
 0
 0
-1
 0
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
 0
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
+0
+0
+0
 0
 0
 1
 0
 0
-1
 0
-1
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
 0
@@ -20017,128 +32015,75 @@ label
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
@@ -20147,43 +32092,28 @@ label
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
@@ -20195,67 +32125,40 @@ label
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
 0
-1
-1
-1
 0
 0
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
-1
 0
-1
 0
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
-1
-1
 0
-1
-1
-1
 0
 0
 0
@@ -20268,134 +32171,69 @@ label
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
@@ -20406,39 +32244,27 @@ label
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
@@ -20446,17 +32272,13 @@ label
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
@@ -20468,89 +32290,43 @@ label
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
 0
 0
 0
@@ -20561,18 +32337,10 @@ label
 0
 0
 0
-1
 0
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
 0
 0
@@ -20580,57 +32348,34 @@ label
 0
 0
 0
-1
-1
-1
+0
 1
 0
 0
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
-1
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
@@ -20639,80 +32384,45 @@ label
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
 0
@@ -20720,169 +32430,102 @@ label
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
-1
-1
-1
-1
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
@@ -20891,62 +32534,30 @@ label
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
 0
 0
 0
@@ -20955,109 +32566,64 @@ label
 0
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
@@ -21065,14 +32631,9 @@ label
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
 0
 0
 0
@@ -21081,43 +32642,26 @@ label
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
@@ -21125,79 +32669,48 @@ label
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
-1
-1
 0
 0
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
@@ -21205,84 +32718,48 @@ label
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
-1
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
@@ -21290,14 +32767,7 @@ label
 0
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
@@ -21305,32 +32775,23 @@ label
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
@@ -21338,217 +32799,128 @@ label
 0
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
 0
 0
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
+0
+0
+0
 0
 1
 0
-1
-1
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
-1
-1
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
@@ -21556,415 +32928,241 @@ label
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
 0
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
-1
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
 0
 0
 0
 0
-1
 0
-1
-1
-1
 0
-1
 0
 0
-1
 0
-1
 0
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
-1
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
 0
 0
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
@@ -21972,27 +33170,16 @@ label
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
 0
 0
@@ -22002,167 +33189,97 @@ label
 0
 0
 0
-1
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
 0
 0
 0
-1
 0
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
-1
 0
 0
-1
 0
 0
-1
-1
-1
 0
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
@@ -22172,175 +33289,102 @@ label
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
-1
 0
 0
 0
@@ -22351,218 +33395,106 @@ label
 0
 0
 0
-1
-1
-1
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
-1
 0
-1
-1
 0
-1
-1
 0
-1
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
@@ -22572,13 +33504,7 @@ label
 0
 0
 0
-1
-1
-1
-1
-1
 0
-1
 0
 0
 0
@@ -22592,7 +33518,6 @@ label
 0
 0
 0
-1
 0
 0
 0
@@ -22605,55 +33530,31 @@ label
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
 0
-1
-1
 0
 0
 0
@@ -22661,127 +33562,76 @@ label
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
@@ -22795,18 +33645,9 @@ label
 0
 0
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
 0
 0
@@ -22814,55 +33655,32 @@ label
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
 0
 0
@@ -22873,140 +33691,79 @@ label
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
-1
 0
 0
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
-1
-1
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
 0
 0
-1
 0
 0
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
@@ -23016,245 +33773,143 @@ label
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
-1
 0
-1
-1
-1
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
-1
 0
 0
 0
-1
-1
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
+0
+0
+0
+0
+0
 1
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
 0
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
@@ -23264,80 +33919,47 @@ label
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
 0
@@ -23345,44 +33967,29 @@ label
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
-1
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
@@ -23392,145 +33999,80 @@ label
 0
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
-1
-1
-1
 0
 0
 0
@@ -23539,30 +34081,12 @@ label
 0
 0
 0
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
 0
 0
 0
@@ -23575,102 +34099,67 @@ label
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
-1
 0
-1
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
@@ -23678,226 +34167,127 @@ label
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
-1
 0
 0
-1
-1
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
-1
-1
-1
-1
 0
 0
 0
-1
 0
-1
 0
-1
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
-1
-1
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
-1
-1
-1
-1
 0
 0
 0
-1
 0
-1
-1
-1
 0
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
 0
@@ -23906,52 +34296,29 @@ label
 0
 0
 0
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
@@ -23961,229 +34328,122 @@ label
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
 0
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
-1
-1
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
-1
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
@@ -24191,19 +34451,14 @@ label
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
@@ -24215,59 +34470,36 @@ label
 0
 0
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
@@ -24278,19 +34510,10 @@ label
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
 0
 0
@@ -24298,135 +34521,71 @@ label
 0
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
-1
 0
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
@@ -24437,42 +34596,29 @@ label
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
+0
 0
 0
 0
 1
 0
 0
-1
 0
 0
-1
 0
-1
-1
-1
 0
 0
 0
@@ -24480,20 +34626,13 @@ label
 0
 0
 0
-1
 0
-1
 0
-1
 0
-1
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
@@ -24501,77 +34640,48 @@ label
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
-1
 0
 0
-1
 0
-1
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
@@ -24579,390 +34689,227 @@ label
 0
 0
 0
-1
 0
-1
-1
 0
 0
 1
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
 0
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
-1
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
-1
 0
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
@@ -24971,167 +34918,96 @@ label
 0
 0
 0
-1
-1
-1
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
 0
-1
+0
+0
+0
 1
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
-1
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
@@ -25142,158 +35018,89 @@ label
 0
 0
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
 0
 0
@@ -25302,49 +35109,27 @@ label
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
 0
 0
 0
@@ -25364,104 +35149,54 @@ label
 0
 0
 0
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
 0
@@ -25471,95 +35206,52 @@ label
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
-1
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
-1
 0
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
@@ -25567,51 +35259,32 @@ label
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
@@ -25619,47 +35292,24 @@ label
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
 0
@@ -25667,69 +35317,42 @@ label
 0
 0
 0
-1
-1
-1
-1
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
-1
-1
-1
 0
 0
 0
@@ -25738,220 +35361,118 @@ label
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
-1
-1
 0
 0
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
 0
 0
 0
-1
 0
-1
-1
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
@@ -25960,24 +35481,13 @@ label
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
 0
@@ -25986,287 +35496,168 @@ label
 0
 0
 0
-1
-1
-1
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
-1
-1
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
-1
 0
 0
 0
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
-1
-1
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
@@ -26275,44 +35666,23 @@ label
 0
 0
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
 0
@@ -26322,129 +35692,71 @@ label
 0
 0
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
 0
-1
 0
-1
-1
 0
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
-1
-1
 0
 0
-1
 0
-1
 0
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
@@ -26452,75 +35764,40 @@ label
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
 0
-1
-1
 0
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
 0
@@ -26530,78 +35807,52 @@ label
 0
 0
 0
-1
 0
 0
 0
-1
-1
-1
 0
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
-1
-1
+0
+0
+0
+0
 0
 1
 0
@@ -26610,43 +35861,24 @@ label
 0
 0
 0
-1
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
 0
-1
 0
 0
 0
@@ -26654,222 +35886,120 @@ label
 0
 0
 0
-1
-1
 0
-1
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
-1
-1
 0
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
 1
-1
 0
 0
 0
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
 0
 0
 0
@@ -26877,107 +36007,57 @@ label
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
 0
@@ -26987,254 +36067,137 @@ label
 0
 0
 0
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
 0
-1
-1
-1
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
-1
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
@@ -27243,25 +36206,14 @@ label
 0
 0
 0
-1
 0
 0
-1
 0
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
 0
 0
-1
-1
 0
 0
 0
@@ -27269,279 +36221,159 @@ label
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
-1
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
-1
-1
-1
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
 0
-1
-1
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
-1
-1
 0
-1
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
-1
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
 0
-1
 0
-1
 0
-1
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
@@ -27551,8 +36383,6 @@ label
 0
 0
 0
-1
-1
 0
 0
 0
@@ -27562,118 +36392,63 @@ label
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
-1
 0
-1
-1
-1
 0
-1
 0
 0
 0
-1
-1
 0
-1
-1
 0
 0
-1
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
-1
-1
-1
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
 0
@@ -27681,32 +36456,17 @@ label
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
 0
 0
@@ -27717,9 +36477,7 @@ label
 0
 0
 0
-1
 0
-1
 0
 0
 0
@@ -27727,291 +36485,149 @@ label
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
-1
-1
 0
 0
-1
-1
-1
 0
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
 0
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
 0
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
@@ -28019,49 +36635,33 @@ label
 0
 0
 0
-1
 0
-1
 0
-1
-1
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
@@ -28072,387 +36672,206 @@ label
 0
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
 0
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
-1
-1
 0
 0
 0
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
 0
-1
-1
 0
 0
 0
@@ -28460,28 +36879,13 @@ label
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
@@ -28490,39 +36894,27 @@ label
 0
 0
 0
-1
 0
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
@@ -28534,305 +36926,170 @@ label
 0
 0
 0
-1
 0
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
-1
-1
 0
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
@@ -28844,32 +37101,20 @@ label
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
@@ -28877,194 +37122,103 @@ label
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
-1
 0
 0
-1
 0
-1
 0
-1
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
-1
 0
 0
-1
-1
-1
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
-1
-1
 0
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
@@ -29074,38 +37228,17 @@ label
 0
 0
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
 0
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
 0
@@ -29114,181 +37247,104 @@ label
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
-1
-1
-1
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
 0
 0
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
-1
-1
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
@@ -29296,360 +37352,208 @@ label
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
 0
-1
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
 0
-1
 0
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
-1
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
+0
+0
+0
 0
 1
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
-1
-1
 0
 0
-1
-1
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
@@ -29657,233 +37561,126 @@ label
 0
 0
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
-1
-1
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
-1
-1
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
-1
-1
-1
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
@@ -29894,185 +37691,97 @@ label
 0
 0
 0
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
-1
 0
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
-1
-1
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
@@ -30080,179 +37789,108 @@ label
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
 0
-1
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
-1
-1
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
+1
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
 0
 0
-1
-1
-1
 0
 0
 0
@@ -30264,100 +37902,52 @@ label
 0
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
 0
-1
 0
 0
 0
 0
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
@@ -30367,59 +37957,34 @@ label
 0
 0
 0
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
@@ -30427,114 +37992,60 @@ label
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
 1
 0
@@ -30542,91 +38053,50 @@ label
 0
 0
 0
-1
-1
-0
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
-1
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
@@ -30635,127 +38105,73 @@ label
 0
 0
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
@@ -30765,137 +38181,77 @@ label
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
-1
-1
 0
 0
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
-1
-1
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
-1
-1
 0
-1
 0
-1
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
 0
@@ -30905,51 +38261,24 @@ label
 0
 0
 0
-1
 0
 0
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
@@ -30958,80 +38287,49 @@ label
 0
 0
 0
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
 0
-1
 0
-1
 0
 0
 1
@@ -31039,8 +38337,6 @@ label
 0
 0
 0
-1
-1
 0
 0
 0
@@ -31054,257 +38350,133 @@ label
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
-1
-1
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
-1
 0
-1
-1
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
 0
-1
 0
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
@@ -31313,304 +38485,151 @@ label
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
 0
-1
 0
-1
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
-1
-1
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
 0
 0
 0
-1
-1
 0
-1
 0
-1
-1
-1
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
@@ -31620,554 +38639,283 @@ label
 0
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
-1
 0
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
-1
-1
-1
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
 0
+1
+0
 0
 0
 0
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
 0
 0
 0
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
 0
 0
-1
 0
-1
 0
 0
 0
-1
-1
 0
-1
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
-1
-1
 0
 0
 0
@@ -32175,226 +38923,117 @@ label
 0
 0
 0
-1
-1
 0
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
-1
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
-1
-1
 0
 0
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
-1
-1
-1
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
-1
-1
-1
 0
 0
 0
@@ -32402,19 +39041,10 @@ label
 0
 0
 0
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
 0
-1
 0
 0
 0
@@ -32427,110 +39057,58 @@ label
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
 0
 0
-1
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
@@ -32538,15 +39116,9 @@ label
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
@@ -32554,168 +39126,100 @@ label
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
-1
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
@@ -32725,608 +39229,345 @@ label
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
 0
-1
-1
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
-1
-1
-1
 0
 0
-1
 0
-1
 0
-1
-1
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
-1
 0
-1
 0
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
 0
 1
 0
-1
 0
 0
 0
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
-1
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
-1
 0
 0
 0
-1
-1
-1
 0
-1
 0
-1
-1
 0
 0
 0
@@ -33335,129 +39576,70 @@ label
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
 0
 0
 0
@@ -33465,94 +39647,53 @@ label
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
-1
-1
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
-1
-1
 0
-1
 0
 0
 0
-1
-1
-1
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
@@ -33560,59 +39701,36 @@ label
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
@@ -33620,99 +39738,51 @@ label
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
@@ -33721,33 +39791,21 @@ label
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
@@ -33757,184 +39815,102 @@ label
 0
 0
 0
-1
-1
 0
-1
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
-1
-1
 0
 0
 0
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
 0
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
 0
-1
-1
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
-1
-1
-1
 0
 0
 0
@@ -33942,39 +39918,19 @@ label
 0
 0
 0
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
@@ -33982,27 +39938,16 @@ label
 0
 0
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
@@ -34014,489 +39959,260 @@ label
 0
 0
 0
-1
 0
-1
 0
-1
 0
-1
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
 0
 0
 0
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
-1
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
-1
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
 0
-1
-1
-1
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
@@ -34506,184 +40222,103 @@ label
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
-1
-1
 0
 0
-1
 0
 0
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
 0
-1
 0
-1
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
-1
 0
 0
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
 0
 0
 0
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
-1
-1
 0
-1
 0
 0
-1
 0
 0
 0
@@ -34692,9 +40327,7 @@ label
 0
 0
 0
-1
 0
-1
 0
 0
 0
@@ -34704,104 +40337,56 @@ label
 0
 0
 0
-1
 0
-1
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
 0
-1
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
-1
 0
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
-1
-1
 0
 0
 0
@@ -34810,101 +40395,55 @@ label
 0
 0
 0
-1
-1
-1
-1
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
@@ -34917,214 +40456,121 @@ label
 0
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
+0
 0
 0
 0
 1
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
@@ -35133,57 +40579,33 @@ label
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
-1
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
@@ -35193,9 +40615,7 @@ label
 0
 0
 0
-1
 0
-1
 0
 0
 0
@@ -35204,65 +40624,34 @@ label
 0
 0
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
 0
 0
 0
@@ -35272,68 +40661,43 @@ label
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
-1
-1
-1
-1
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
@@ -35342,320 +40706,181 @@ label
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
 0
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
-1
-1
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
-1
-1
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
-1
-1
 0
 0
 0
@@ -35663,93 +40888,45 @@ label
 0
 0
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
-1
-1
 0
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
@@ -35758,107 +40935,62 @@ label
 0
 0
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
-1
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
@@ -35869,51 +41001,31 @@ label
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
 0
 0
 0
@@ -35922,12 +41034,8 @@ label
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
@@ -35935,81 +41043,49 @@ label
 0
 0
 0
-1
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
@@ -36017,15 +41093,11 @@ label
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
@@ -36034,38 +41106,22 @@ label
 0
 0
 0
-1
-1
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
-1
-1
 0
 0
 0
@@ -36074,218 +41130,129 @@ label
 0
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
 0
+1
+0
+0
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
@@ -36296,231 +41263,133 @@ label
 0
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
 0
-1
-1
-1
 0
 0
 0
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
 0
@@ -36529,15 +41398,11 @@ label
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
@@ -36548,7 +41413,6 @@ label
 0
 0
 0
-1
 0
 0
 0
@@ -36566,64 +41430,41 @@ label
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
@@ -36633,55 +41474,30 @@ label
 0
 0
 0
-1
-1
-1
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
@@ -36690,93 +41506,55 @@ label
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
@@ -36784,27 +41562,16 @@ label
 0
 0
 0
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
@@ -36816,104 +41583,52 @@ label
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
 0
 0
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
 0
 0
@@ -36921,50 +41636,29 @@ label
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
 0
 0
@@ -36973,18 +41667,11 @@ label
 0
 0
 0
-1
-1
-1
-1
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
@@ -36993,53 +41680,31 @@ label
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
 0
 0
 0
@@ -37050,126 +41715,77 @@ label
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
-1
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
@@ -37178,52 +41794,32 @@ label
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
@@ -37231,19 +41827,11 @@ label
 0
 0
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
@@ -37253,87 +41841,52 @@ label
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
@@ -37341,10 +41894,8 @@ label
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
@@ -37352,32 +41903,23 @@ label
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
@@ -37386,200 +41928,121 @@ label
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
-1
-1
-1
 0
 0
 0
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
-1
-1
 0
 0
-1
-1
 0
 0
 0
@@ -37593,14 +42056,10 @@ label
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
@@ -37608,24 +42067,16 @@ label
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
@@ -37633,49 +42084,29 @@ label
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
@@ -37683,89 +42114,58 @@ label
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
 0
@@ -37773,55 +42173,30 @@ label
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
 0
 0
@@ -37829,57 +42204,38 @@ label
 0
 0
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
 0
 0
@@ -37891,14 +42247,11 @@ label
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
@@ -37908,53 +42261,32 @@ label
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
@@ -37963,105 +42295,67 @@ label
 0
 0
 0
-1
 0
-1
 0
-1
 0
-1
-1
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
@@ -38071,23 +42365,13 @@ label
 0
 0
 0
-1
-1
 0
 0
 0
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
 0
@@ -38096,46 +42380,28 @@ label
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
-1
-1
-1
 0
-1
 0
 0
 0
@@ -38143,22 +42409,14 @@ label
 0
 0
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
@@ -38170,92 +42428,58 @@ label
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
@@ -38264,60 +42488,35 @@ label
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
 0
@@ -38326,259 +42525,146 @@ label
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
-1
 0
 0
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
-1
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
 0
 0
@@ -38587,10 +42673,8 @@ label
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
@@ -38603,7 +42687,6 @@ label
 0
 0
 0
-1
 0
 0
 0
@@ -38613,47 +42696,31 @@ label
 0
 0
 0
-1
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
@@ -38662,90 +42729,49 @@ label
 0
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
 0
@@ -38753,314 +42779,201 @@ label
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
-1
 0
-1
 0
-1
-1
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
-1
-1
-1
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
@@ -39071,32 +42984,24 @@ label
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
-1
 0
 0
 0
@@ -39104,55 +43009,35 @@ label
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
@@ -39160,106 +43045,66 @@ label
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
-1
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
@@ -39275,43 +43120,26 @@ label
 0
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
@@ -39320,146 +43148,90 @@ label
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
-1
 0
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
-1
 0
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
@@ -39468,42 +43240,28 @@ label
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
@@ -39511,31 +43269,20 @@ label
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
@@ -39547,31 +43294,18 @@ label
 0
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
@@ -39579,91 +43313,57 @@ label
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
 0
 0
 0
-1
 0
-1
-1
 0
-1
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
@@ -39674,140 +43374,79 @@ label
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
-1
-1
 0
 0
-1
 0
 0
 0
@@ -39817,32 +43456,20 @@ label
 0
 0
 0
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
@@ -39850,215 +43477,122 @@ label
 0
 0
 0
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
-1
 0
-1
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
-1
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
 0
 0
@@ -40066,62 +43600,41 @@ label
 0
 0
 0
-1
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
@@ -40129,30 +43642,18 @@ label
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
@@ -40161,13 +43662,9 @@ label
 0
 0
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
@@ -40175,14 +43672,11 @@ label
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
@@ -40190,35 +43684,22 @@ label
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
 0
@@ -40227,8 +43708,6 @@ label
 0
 0
 0
-1
-1
 0
 0
 0
@@ -40236,14 +43715,10 @@ label
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
@@ -40260,103 +43735,56 @@ label
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
-1
-1
-1
 0
 0
 0
-1
 0
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
 0
-1
-1
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
 0
-1
 0
-1
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
 0
 0
 0
@@ -40364,38 +43792,24 @@ label
 0
 0
 0
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
@@ -40405,36 +43819,23 @@ label
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
-1
-1
-1
-1
 0
 0
 0
@@ -40442,11 +43843,7 @@ label
 0
 0
 0
-1
 0
-1
-1
-1
 0
 0
 0
@@ -40454,224 +43851,131 @@ label
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
-1
 0
-1
 0
-1
-1
-1
 0
 0
 0
-1
 0
-1
-1
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
-1
-1
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
-1
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
 0
 0
 0
@@ -40680,10 +43984,8 @@ label
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
@@ -40694,75 +43996,45 @@ label
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
@@ -40771,20 +44043,14 @@ label
 0
 0
 0
-1
-1
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
@@ -40796,15 +44062,9 @@ label
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
@@ -40813,9 +44073,7 @@ label
 0
 0
 0
-1
 0
-1
 0
 0
 0
@@ -40827,77 +44085,44 @@ label
 0
 0
 0
-1
+0
 1
 0
 0
 0
-1
-1
-1
-1
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
-1
 0
 0
 0
@@ -40905,46 +44130,25 @@ label
 0
 0
 0
-1
 0
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
 0
 0
@@ -40952,49 +44156,27 @@ label
 0
 0
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
 0
-1
 0
-1
 0
 0
 0
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
@@ -41002,60 +44184,39 @@ label
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
@@ -41063,47 +44224,28 @@ label
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
@@ -41111,64 +44253,42 @@ label
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
 0
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
@@ -41178,7 +44298,6 @@ label
 0
 0
 0
-1
 0
 0
 0
@@ -41187,39 +44306,22 @@ label
 0
 0
 0
-1
 0
-1
-1
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
 0
-1
-1
 0
-1
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
@@ -41227,56 +44329,38 @@ label
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
@@ -41284,37 +44368,25 @@ label
 0
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
@@ -41322,107 +44394,70 @@ label
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
-1
 0
-1
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
 0
@@ -41431,48 +44466,31 @@ label
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
 0
 0
-1
 0
 0
 0
@@ -41481,30 +44499,20 @@ label
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
-1
-1
 0
 0
 0
@@ -41512,87 +44520,56 @@ label
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
 0
-1
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
 0
@@ -41601,138 +44578,84 @@ label
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
-1
-1
-1
 0
 0
 0
 0
 0
-1
 0
-1
-1
-1
 0
-1
 0
-1
 0
-1
 0
 0
-1
 0
-1
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
@@ -41741,15 +44664,10 @@ label
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
@@ -41757,56 +44675,34 @@ label
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
+0
+0
 0
 0
 0
@@ -41814,92 +44710,53 @@ label
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
 0
-1
-1
 0
-1
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
 0
 0
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
@@ -41910,186 +44767,117 @@ label
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
-1
-1
 0
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
-1
-1
-1
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
-1
 0
-1
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
@@ -42099,256 +44887,156 @@ label
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
-1
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
 0
 0
 0
@@ -42356,50 +45044,32 @@ label
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
 0
@@ -42409,260 +45079,156 @@ label
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
-1
-1
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
-1
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
-1
-1
-1
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
 0
 0
 0
-1
-1
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
-1
-1
 0
 0
 0
@@ -42670,213 +45236,124 @@ label
 0
 0
 0
-1
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
-1
-1
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
@@ -42886,149 +45363,81 @@ label
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
-1
-1
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
-1
-1
-1
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
@@ -43037,45 +45446,30 @@ label
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
-1
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
 0
 0
@@ -43085,38 +45479,24 @@ label
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
@@ -43125,218 +45505,128 @@ label
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
 0
-1
 0
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
 0
-1
-1
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
-1
-1
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
@@ -43345,35 +45635,25 @@ label
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
@@ -43383,61 +45663,39 @@ label
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
@@ -43445,151 +45703,94 @@ label
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
-1
 0
 0
 0
@@ -43598,8 +45799,6 @@ label
 0
 0
 0
-1
-1
 0
 0
 0
@@ -43616,52 +45815,31 @@ label
 0
 0
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
-1
 0
 0
 0
@@ -43669,122 +45847,72 @@ label
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
 0
 0
@@ -43792,114 +45920,69 @@ label
 0
 0
 0
-1
 0
-1
 0
-1
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
 0
-1
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
@@ -43908,57 +45991,34 @@ label
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
@@ -43969,25 +46029,17 @@ label
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
@@ -43996,41 +46048,29 @@ label
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
-1
 0
-1
 0
-1
 0
 0
 0
@@ -44038,58 +46078,31 @@ label
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
-1
-1
 0
 0
 0
-1
 0
-1
 0
-1
 0
-1
 0
 0
 0
-1
 0
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
 0
 0
 0
@@ -44103,7 +46116,6 @@ label
 0
 0
 0
-1
 0
 0
 0
@@ -44114,28 +46126,16 @@ label
 0
 0
 0
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
-1
-1
-1
 0
 0
 0
@@ -44145,136 +46145,84 @@ label
 0
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
-1
 0
-1
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
@@ -44282,122 +46230,65 @@ label
 0
 0
 0
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
-1
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
 0
-1
 0
-1
-1
 0
 0
-1
 0
 0
 0
@@ -44405,88 +46296,59 @@ label
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
-1
 0
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
 0
 0
 0
@@ -44495,29 +46357,19 @@ label
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
@@ -44525,27 +46377,18 @@ label
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
-1
-1
-1
-1
 0
-1
 0
 0
 0
@@ -44557,101 +46400,61 @@ label
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
-1
 0
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
 0
@@ -44659,29 +46462,19 @@ label
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
@@ -44692,125 +46485,71 @@ label
 0
 0
 0
-1
-1
 0
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
-1
 0
-1
-1
-1
 0
-1
 0
 0
 0
-1
 0
-1
-1
 0
-1
-1
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
@@ -44818,10 +46557,6 @@ label
 0
 0
 0
-1
-1
-1
-1
 0
 0
 0
@@ -44829,37 +46564,21 @@ label
 0
 0
 0
-1
 0
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
-1
 0
 0
-1
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
@@ -44869,38 +46588,26 @@ label
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
@@ -44908,31 +46615,17 @@ label
 0
 0
 0
-1
-1
-1
-1
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
-1
 0
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
@@ -44941,19 +46634,14 @@ label
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
@@ -44962,98 +46650,56 @@ label
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
@@ -45067,26 +46713,16 @@ label
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
-1
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
@@ -45094,100 +46730,66 @@ label
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
-1
 0
-1
-1
-1
 0
 0
-1
 0
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
@@ -45199,80 +46801,50 @@ label
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
 0
-1
-1
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
 0
 0
@@ -45281,38 +46853,25 @@ label
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
@@ -45320,34 +46879,24 @@ label
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
-1
-1
-1
 0
 0
-1
 0
 0
 0
@@ -45357,58 +46906,39 @@ label
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
-1
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
@@ -45417,51 +46947,26 @@ label
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
-1
-1
-1
 0
 0
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
@@ -45470,24 +46975,15 @@ label
 0
 0
 0
-1
 0
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
+0
+0
 0
 0
 0
@@ -45495,65 +46991,39 @@ label
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
@@ -45561,52 +47031,32 @@ label
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
 0
@@ -45617,180 +47067,93 @@ label
 0
 0
 0
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
 0
-1
 0
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
-1
 0
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
 0
-1
 0
 1
-1
 0
-1
-1
 0
-1
-1
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
 0
 0
 0
@@ -45798,31 +47161,19 @@ label
 0
 0
 0
-1
 0
-1
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
@@ -45830,32 +47181,19 @@ label
 0
 0
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
-1
 0
 0
-1
 0
 0
 0
@@ -45863,32 +47201,23 @@ label
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
@@ -45898,40 +47227,24 @@ label
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
 0
-1
 0
-1
-1
-1
 0
 0
-1
 0
-1
 0
 0
 0
@@ -45939,216 +47252,134 @@ label
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
-1
 0
 0
-1
 0
-1
-1
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
-1
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
-1
-1
 0
 0
-1
 0
 0
 0
@@ -46160,19 +47391,11 @@ label
 0
 0
 0
-1
-1
-1
 0
-1
 0
-1
 0
-1
 0
-1
 0
-1
 0
 0
 0
@@ -46182,149 +47405,92 @@ label
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
 0
 0
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
-1
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
@@ -46336,135 +47502,74 @@ label
 0
 0
 0
-1
-1
-1
 0
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
-1
-1
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
-1
-1
-1
 0
 0
 0
 0
 0
-1
 0
-1
-1
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
 0
@@ -46472,49 +47577,28 @@ label
 0
 0
 0
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
 0
 0
 0
-1
-1
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
@@ -46525,30 +47609,19 @@ label
 0
 0
 0
-1
 0
-1
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
-1
-1
 0
 0
 0
-1
-1
 0
 0
 0
@@ -46557,99 +47630,53 @@ label
 0
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
-1
 0
 0
 0
-1
-1
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
-1
-1
 0
-1
 0
 0
-1
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
@@ -46657,77 +47684,42 @@ label
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
-1
 0
-1
-1
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
@@ -46737,24 +47729,16 @@ label
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
-1
-1
-1
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
@@ -46764,95 +47748,59 @@ label
 0
 0
 0
-1
-1
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
-1
-1
-1
-1
 0
 0
 0
@@ -46860,181 +47808,112 @@ label
 0
 0
 0
-1
-1
-1
 0
-1
 0
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
-1
-1
-1
-1
 0
 0
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
-1
 0
-1
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
@@ -47046,17 +47925,11 @@ label
 0
 0
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
 0
-1
 0
 0
 0
@@ -47066,68 +47939,48 @@ label
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
+0
+0
+0
+0
 0
 0
 1
-1
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
 0
 0
 0
@@ -47135,51 +47988,31 @@ label
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
@@ -47198,194 +48031,120 @@ label
 0
 0
 0
-1
 0
 0
-1
 0
-1
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
 0
-1
-1
 0
 0
-1
-1
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
@@ -47394,122 +48153,70 @@ label
 0
 0
 0
-1
 0
-1
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
@@ -47521,190 +48228,108 @@ label
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
-1
-1
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
 0
-1
-1
 0
-1
 0
-1
 0
-1
-1
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
-1
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
-1
-1
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
-1
 0
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
 0
-1
-1
-1
 0
 0
-1
-1
-1
-1
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
@@ -47712,41 +48337,23 @@ label
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
@@ -47756,199 +48363,112 @@ label
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
-1
 0
-1
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
-1
-1
-1
 0
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
-1
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
-1
-1
-1
-1
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
-1
-1
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
-1
 0
 0
 0
@@ -47957,139 +48477,85 @@ label
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
-1
 0
-1
 0
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
 0
-1
 0
-1
 0
-1
 0
 0
 0
@@ -48097,49 +48563,26 @@ label
 0
 0
 0
-1
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
-1
 0
-1
 0
 0
-1
 0
-1
-1
-1
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
@@ -48151,200 +48594,119 @@ label
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
-1
-1
-1
 0
-1
 0
 0
 0
 0
 0
-1
 0
-1
-1
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
-1
 0
-1
 0
-1
 0
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
-1
-1
-1
-1
-1
-1
 0
-1
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
-1
-1
 0
 0
 0
-1
-1
 0
-1
 0
 0
-1
-1
 0
-1
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
-1
-1
 0
 0
 0
-1
 0
 0
 0
@@ -48356,69 +48718,45 @@ label
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
-1
-1
-1
 0
-1
 0
-1
-1
-1
-1
 0
 0
-1
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
@@ -48427,24 +48765,13 @@ label
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
-1
-1
-1
 0
 0
 0
@@ -48453,55 +48780,37 @@ label
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
-1
-1
 0
 0
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
 0
@@ -48509,25 +48818,17 @@ label
 0
 0
 0
-1
 0
-1
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
@@ -48536,8 +48837,6 @@ label
 0
 0
 0
-1
-1
 0
 0
 0
@@ -48545,31 +48844,22 @@ label
 0
 0
 0
-1
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
 0
-1
 0
 0
 0
@@ -48579,64 +48869,41 @@ label
 0
 0
 0
-1
 0
-1
-1
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
-1
-1
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
@@ -48649,67 +48916,44 @@ label
 0
 0
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
-1
-1
 0
 0
 0
@@ -48718,36 +48962,16 @@ label
 0
 0
 0
-1
-1
-1
-1
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
-1
 0
-1
-1
-1
 0
 0
 0
@@ -48756,196 +48980,112 @@ label
 0
 0
 0
-1
 0
-1
-1
-1
-1
-1
 0
 0
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
 0
-1
 0
 0
-1
-1
-1
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
-1
 0
-1
-1
-1
 0
-1
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
-1
-1
-1
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
-1
-1
-1
 0
 0
 0
-1
-1
-1
-1
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
-1
 0
-1
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
@@ -48954,9 +49094,6 @@ label
 0
 0
 0
-1
-1
-1
 0
 0
 0
@@ -48966,10 +49103,8 @@ label
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
@@ -48978,53 +49113,28 @@ label
 0
 0
 0
-1
 0
-1
-1
 0
-1
 0
-1
-1
 0
-1
-1
 0
-1
 0
-1
-1
-1
 0
-1
-1
 0
-1
-1
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
-1
-1
 0
-1
 0
 0
 0
@@ -49037,117 +49147,72 @@ label
 0
 0
 0
-1
-1
 0
-1
-1
-1
-1
-1
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
 0
 0
-1
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
-1
-1
 0
-1
 0
 0
-1
 0
 0
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
 0
 0
-1
 0
 0
 0
@@ -49157,7 +49222,6 @@ label
 0
 0
 0
-1
 0
 0
 0
@@ -49165,15 +49229,11 @@ label
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
@@ -49184,80 +49244,54 @@ label
 0
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
-1
 0
 0
-1
-1
 0
 0
-1
 0
-1
-1
-1
-1
 0
 0
-1
 0
 0
-1
 0
 0
-1
 0
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
-1
 0
-1
 0
-1
-1
 0
 0
 0
@@ -49268,48 +49302,33 @@ label
 0
 0
 0
-1
-1
 0
 0
 0
-1
 0
-1
 0
 0
-1
-1
 0
 0
 0
 0
-1
-1
 0
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
@@ -49318,59 +49337,41 @@ label
 0
 0
 0
-1
-1
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
-1
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
 0
-1
 0
 0
 0
-1
-1
 0
 0
 0
 0
-1
-1
 0
-1
 0
 0
 0
-1
-1
-1
 0
 0
 0
@@ -49379,12 +49380,11 @@ label
 0
 0
 0
-1
 0
 0
 0
 0
 0
-1
+0
 0
 0
diff --git a/docs/PIPELINE.md b/docs/PIPELINE.md
index cefa0d9..4c71530 100644
--- a/docs/PIPELINE.md
+++ b/docs/PIPELINE.md
@@ -262,3 +262,4 @@ Feature transformations are defined in `configs/transforms_config.json`:
 - ✅ Multiple random seeds for stability
 - ✅ Probability calibration applied
 - ✅ All artifacts properly documented
+
diff --git a/docs/SWEEP_USAGE.md b/docs/SWEEP_USAGE.md
index 6a9e1f9..8a2edfe 100644
--- a/docs/SWEEP_USAGE.md
+++ b/docs/SWEEP_USAGE.md
@@ -234,3 +234,4 @@ After successful sweep completion:
 3. **Validate Stacking Performance** in `summary.csv`
 4. **Deploy Best Model** using optimal configuration
 5. **Document Results** for future reference
+
diff --git a/requirements.txt b/requirements.txt
index 6cf0ec4..92fcad1 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -10,5 +10,4 @@ seaborn>=0.12
 joblib>=1.3
 openpyxl>=3.1
 xlrd>=2.0
-optuna>=3.0
 wandb>=0.16
\ No newline at end of file
diff --git a/scripts/repo_relayout.sh b/scripts/repo_relayout.sh
index c3eda94..a27c6f8 100755
--- a/scripts/repo_relayout.sh
+++ b/scripts/repo_relayout.sh
@@ -64,3 +64,4 @@ echo "✅ Repo relayout complete!"
 echo ""
 echo "Directory structure:"
 find . -type d -name "__pycache__" -prune -o -type d -print | head -20 | sort
+
diff --git a/scripts/run_quick_sweep.sh b/scripts/run_quick_sweep.sh
index 36a5902..45b41f0 100755
--- a/scripts/run_quick_sweep.sh
+++ b/scripts/run_quick_sweep.sh
@@ -27,3 +27,4 @@ echo "Start: $(date)"
 bash scripts/run_risk_model_sweep.sh "$ALGO" "$TRIALS" "$N_SPLITS" "$SEED"
 
 echo "✅ Quick sweep completed!"
+
diff --git a/scripts/run_risk_model_sweep.sh b/scripts/run_risk_model_sweep.sh
index 52f6186..828a27b 100755
--- a/scripts/run_risk_model_sweep.sh
+++ b/scripts/run_risk_model_sweep.sh
@@ -9,9 +9,9 @@ set -euo pipefail
 # =============================================================================
 
 # Weights & Biases Configuration
-export WANDB_PROJECT="Risk Score"
 export WANDB_API_KEY="3ff6a13421fb5921502235dde3f9a4700f33b5b8"
 export WANDB_MODE="online"
+WANDB_PROJECT="Risk Score"
 
 # Pipeline Configuration
 ALGO="${1:-xgb}"  # xgb or lgb
@@ -74,7 +74,7 @@ echo "- Working Directory: $(pwd)"
 echo "📦 Checking required packages..."
 python -c "
 import sys
-required = ['pandas', 'numpy', 'scikit-learn', 'optuna', 'tqdm']
+required = ['pandas', 'numpy', 'scikit-learn', 'tqdm']
 if '$ALGO' == 'xgb':
     required.append('xgboost')
 else:
@@ -131,7 +131,8 @@ python -m src.train_gbdt_sweep \
     --trials "$TRIALS" \
     --n-splits "$N_SPLITS" \
     --seed "$SEED" \
-    --wandb
+    --wandb \
+    --wandb-project "$WANDB_PROJECT"
 
 gbdt_exit_code=$?
 end_time=$(date +%s)
@@ -149,12 +150,9 @@ if [[ $gbdt_exit_code -eq 0 ]]; then
 import json
 with open('$GBDT_OUTPUT/best_params.json', 'r') as f:
     results = json.load(f)
-print(f'Best CV AUC: {results[\"best_score\"]:.6f}')
-print(f'Algorithm: {results[\"algorithm\"].upper()}')
-print(f'Trials completed: {results[\"n_trials\"]}')
-if 'final_oof_auc' in results:
-    print(f'Final OOF AUC: {results[\"final_oof_auc\"]:.6f}')
-    print(f'Final OOF AP: {results[\"final_oof_ap\"]:.6f}')
+print(f'Best Trial: #{results[\"trial\"]}')
+print(f'Best AUC: {results[\"auc\"]:.6f}')
+print(f'Best AP: {results[\"ap\"]:.6f}')
 "
     fi
 else
diff --git a/scripts/run_train_baselines.sh b/scripts/run_train_baselines.sh
index 21ae322..ba4bcb0 100755
--- a/scripts/run_train_baselines.sh
+++ b/scripts/run_train_baselines.sh
@@ -19,3 +19,4 @@ python -m src.models.train_baselines \
 echo "=== Baseline Training Complete ==="
 echo "End time: $(date)"
 echo "Results saved to: artifacts/reports/baselines/"
+
diff --git a/scripts/run_train_boosters.sh b/scripts/run_train_boosters.sh
index f7344f8..492379f 100755
--- a/scripts/run_train_boosters.sh
+++ b/scripts/run_train_boosters.sh
@@ -20,3 +20,4 @@ python -m src.models.train_boosters \
 echo "=== Booster Training Complete ==="
 echo "End time: $(date)"
 echo "Results saved to: artifacts/reports/boosters/"
+
diff --git a/src/io_utils.py b/src/io_utils.py
deleted file mode 100644
index 24522d6..0000000
--- a/src/io_utils.py
+++ /dev/null
@@ -1,28 +0,0 @@
-# io_utils.py
-import json, numpy as np, pandas as pd
-from pathlib import Path
-
-def load_xy(data_root: str):
-    X = pd.read_parquet(Path(data_root)/"X_features.parquet")
-    y_df = pd.read_csv(Path(data_root)/"y_label.csv")
-    # first non-id column is the target (your file contains label_union)
-    target_col = [c for c in y_df.columns if c.lower() not in {"id","row_id","user_id"}][0]
-    y = y_df[target_col].astype(int).values
-    return X, y, target_col
-
-def maybe_load_monotone(data_root: str, feature_names):
-    cfg_path = Path(data_root)/"monotone_config.json"
-    if not cfg_path.exists():
-        return None
-    cfg = json.loads(cfg_path.read_text())
-    vec = [int(cfg.get(f, 0)) for f in feature_names]  # 1, -1, 0
-    return vec
-
-def dump_json(obj, path):
-    Path(path).parent.mkdir(parents=True, exist_ok=True)
-    with open(path, "w") as f:
-        f.write(json.dumps(obj, indent=2))
-
-def save_df(df, path):
-    Path(path).parent.mkdir(parents=True, exist_ok=True)
-    df.to_csv(path, index=False)
diff --git a/src/metrics.py b/src/metrics.py
deleted file mode 100644
index e9d2320..0000000
--- a/src/metrics.py
+++ /dev/null
@@ -1,48 +0,0 @@
-# metrics.py
-import numpy as np, pandas as pd
-from sklearn.metrics import roc_auc_score, average_precision_score
-
-def gini_from_auc(auc: float) -> float:
-    return 2.0 * auc - 1.0
-
-def ks_stat(y_true, y_score):
-    df = pd.DataFrame({"y": y_true, "p": y_score}).sort_values("p")
-    df["cum_pos"] = (df["y"]==1).cumsum() / (df["y"]==1).sum()
-    df["cum_neg"] = (df["y"]==0).cumsum() / (df["y"]==0).sum()
-    return float(np.max(np.abs(df["cum_pos"] - df["cum_neg"])))
-
-def decile_table(y_true, y_score, n_bins=10):
-    df = pd.DataFrame({"y": y_true, "p": y_score})
-    # robust deciling on prob with ties
-    df["decile"] = pd.qcut(df["p"].rank(method="first"), q=n_bins, labels=list(range(n_bins,0,-1)))
-    agg = df.groupby("decile").agg(
-        n=("y","size"),
-        pos=("y","sum"),
-        avg_p=("p","mean")
-    ).reset_index()
-    agg["neg"] = agg["n"] - agg["pos"]
-    agg["pos_rate"] = agg["pos"] / agg["n"]
-    agg["cum_pos"] = agg["pos"].cumsum()
-    agg["cum_neg"] = agg["neg"].cumsum()
-    total_pos, total_neg = agg["pos"].sum(), agg["neg"].sum()
-    agg["cum_pos_capture"] = agg["cum_pos"] / total_pos
-    agg["cum_neg_share"] = agg["cum_neg"] / (total_neg if total_neg>0 else 1.0)
-    # classic lift = pos_rate / overall_rate
-    overall_rate = total_pos / (total_pos + total_neg)
-    agg["lift"] = agg["pos_rate"] / overall_rate
-    return agg
-
-def summarize_all(y_true, y_score, label="oof", n_bins=10):
-    auc = roc_auc_score(y_true, y_score)
-    ap  = average_precision_score(y_true, y_score)
-    gini = gini_from_auc(auc)
-    ks = ks_stat(y_true, y_score)
-    dec = decile_table(y_true, y_score, n_bins=n_bins)
-    summary = {
-        "label": label,
-        "auc": float(auc),
-        "ap":  float(ap),
-        "gini": float(gini),
-        "ks": float(ks)
-    }
-    return summary, dec
diff --git a/src/models/train.py b/src/models/train.py
deleted file mode 100644
index 8247b10..0000000
--- a/src/models/train.py
+++ /dev/null
@@ -1,308 +0,0 @@
-# === MODEL STARTER WITH REDUNDANCY PRUNE + PCS QUICK CHECK ===
-import os, json, time, math, gc, itertools
-from pathlib import Path
-import numpy as np
-import pandas as pd
-from tqdm import tqdm
-
-from sklearn.model_selection import StratifiedKFold, train_test_split
-from sklearn.preprocessing import StandardScaler, RobustScaler
-from sklearn.metrics import roc_auc_score, average_precision_score, brier_score_loss
-from sklearn.linear_model import LogisticRegression
-from sklearn.ensemble import GradientBoostingClassifier
-
-# ------------------------------------------------------------
-# I/O
-# ------------------------------------------------------------
-print("=== Model Training Pipeline with Progress Tracking ===")
-
-# Setup progress tracking for main phases
-main_phases = [
-    "Loading data and preprocessing",
-    "Building redundancy graph",
-    "Pruning redundant features", 
-    "Training Logistic Regression",
-    "Training Gradient Boosting",
-    "Computing feature importances",
-    "Saving final outputs"
-]
-
-main_progress = tqdm(main_phases, desc="Overall Progress")
-
-DATA_DIR = Path("data")
-OUT_DIR = DATA_DIR / "outputs"
-OUT_DIR.mkdir(exist_ok=True, parents=True)
-
-# Load features & target
-print("Loading feature matrix and labels...")
-X = pd.read_parquet(DATA_DIR / "X_features.parquet")
-y_df = pd.read_csv(DATA_DIR / "y_label.csv")
-print(f"Loaded {X.shape[0]:,} samples with {X.shape[1]} features")
-
-# Choose label column (prefer label_union, else first boolean/int column)
-label_candidates = [c for c in ["label_union","label_weighted","label_hierarchical","label_clustered"] if c in y_df.columns]
-label_col = label_candidates[0] if label_candidates else y_df.columns[-1]
-y = y_df[label_col].astype(int).values
-print(f"Using label column: {label_col} (prevalence: {y.mean():.4f})")
-
-# ------------------------------------------------------------
-# Load redundancy pairs + 1D metrics (be robust to file name typos)
-# ------------------------------------------------------------
-print("Loading QC files...")
-pairs_path = None
-for cand in ["qc_redundancy_pairs.csv","qc_redundancyt_pairs.csv"]:
-    p = DATA_DIR / cand
-    if p.exists():
-        pairs_path = p; break
-if pairs_path is None:
-    raise FileNotFoundError("qc_redundancy_pairs.csv not found (also tried qc_redundancyt_pairs.csv).")
-
-metrics_path = None
-for cand in ["qc_single_feature_matrix.csv","qc_single_feature_metrics.csv"]:
-    p = DATA_DIR / cand
-    if p.exists():
-        metrics_path = p; break
-if metrics_path is None:
-    raise FileNotFoundError("qc_single_feature_matrix.csv not found (also tried qc_single_feature_metrics.csv).")
-
-pairs = pd.read_csv(pairs_path)  # columns: feature_i, feature_j, pearson_r
-metrics = pd.read_csv(metrics_path)  # columns: feature, auc_1d, ...
-print(f"Loaded {len(pairs)} redundancy pairs and {len(metrics)} feature metrics")
-
-auc_map = dict(zip(metrics["feature"], metrics["auc_1d"]))
-
-# ------------------------------------------------------------
-# Guard set
-# ------------------------------------------------------------
-print("Building guard set...")
-guard = set()
-# from guard_Set.txt (optional)
-for cand in ["guard_Set.txt","guard_set.txt","do_not_use_features.txt"]:
-    p = DATA_DIR / cand
-    if p.exists():
-        for ln in p.read_text().splitlines():
-            ln = ln.strip()
-            if ln:
-                guard.add(ln)
-
-# from dropped_features.json (identifiers, pre-removed columns)
-drop_meta_path = DATA_DIR / "dropped_features.json"
-if drop_meta_path.exists():
-    jf = json.loads(drop_meta_path.read_text())
-    for k in ["guard","identifier","outcome_guard","not_in_raw","fill_rate_lt_threshold"]:
-        for v in jf.get(k, []):
-            guard.add(v)
-
-# If label sources list exists, add as guard (optional)
-sel_lab_path = DATA_DIR / "Selected_label_sources.csv"
-if sel_lab_path.exists():
-    sel_df = pd.read_csv(sel_lab_path)
-    for v in sel_df["variable"].astype(str):
-        guard.add(v)
-
-# Assert: no guard features present
-guard_in_X = sorted(set(X.columns) & guard)
-if guard_in_X:
-    # We will drop them defensively
-    X = X.drop(columns=guard_in_X)
-    pd.Series(guard_in_X, name="dropped_guard_feature").to_csv(OUT_DIR/"qc_guard_removed.csv", index=False)
-    print(f"Defensively dropped {len(guard_in_X)} guard features")
-
-print(f"Guard set size: {len(guard)}, Features after guard: {X.shape[1]}")
-main_progress.update(1)
-
-# ------------------------------------------------------------
-# Redundancy prune: build connected components and keep the best auc_1d in each
-# ------------------------------------------------------------
-print("Building redundancy graph...")
-# Build adjacency
-adj = {}
-def add_edge(a,b):
-    adj.setdefault(a,set()).add(b); adj.setdefault(b,set()).add(a)
-
-print("Processing redundancy pairs...")
-for _,r in tqdm(pairs.iterrows(), desc="Building graph", total=len(pairs)):
-    a, b = r["feature_i"], r["feature_j"]
-    if a in X.columns and b in X.columns:
-        add_edge(a,b)
-
-print("Finding connected components...")
-visited, comps = set(), []
-nodes = list(adj.keys())
-for node in tqdm(nodes, desc="Finding components"):
-    if node in visited: continue
-    # BFS
-    q, comp = [node], set([node]); visited.add(node)
-    while q:
-        u = q.pop()
-        for v in adj.get(u, []):
-            if v not in visited:
-                visited.add(v); comp.add(v); q.append(v)
-    comps.append(sorted(comp))
-
-print(f"Found {len(comps)} connected components")
-main_progress.update(1)
-
-# Decide keep/drop
-print("Selecting best features from each component...")
-keep, drop = set(), set()
-for comp in tqdm(comps, desc="Pruning features"):
-    # choose feature with highest auc_1d; fallback to column present in X
-    scored = [(f, auc_map.get(f, 0.0)) for f in comp if f in X.columns]
-    if not scored: continue
-    best = max(scored, key=lambda t: t[1])[0]
-    keep.add(best)
-    for f,_ in scored:
-        if f != best:
-            drop.add(f)
-
-# Also check pair endpoints that are singletons not in components (no action)
-drop_sorted = sorted(drop)
-keep_sorted = sorted(keep)
-pd.DataFrame({"dropped_feature": drop_sorted}).to_csv(OUT_DIR / "redundancy_drops.csv", index=False)
-
-print(f"Redundancy pruning: keeping {len(keep_sorted)}, dropping {len(drop_sorted)} features")
-
-# Apply drops
-X_model = X.drop(columns=drop_sorted) if drop_sorted else X.copy()
-X_model.to_parquet(OUT_DIR / "X_features_model.parquet")
-print(f"Final feature matrix: {X_model.shape[0]:,} samples × {X_model.shape[1]} features")
-main_progress.update(1)
-
-# ------------------------------------------------------------
-# Train/evaluate: Logistic(ElasticNet) + GradientBoosting with 5-fold CV
-# ------------------------------------------------------------
-def cv_eval_model(clf_name, make_clf, X_df, y_vec, n_splits=5, seeds=[42,202,404,808,1337]):
-    print(f"Training {clf_name} with {len(seeds)} seeds × {n_splits}-fold CV...")
-    rows = []
-    topk_sets = []
-    
-    for seed in tqdm(seeds, desc=f"{clf_name} seeds"):
-        skf = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=seed)
-        oof_pred = np.zeros(len(y_vec), dtype=float)
-        fit_times, pred_times = [], []
-
-        # Refit per fold to collect OOF
-        fold_splits = list(skf.split(X_df, y_vec))
-        for fold, (tr_idx, va_idx) in enumerate(tqdm(fold_splits, desc=f"Fold {seed}", leave=False)):
-            X_tr, X_va = X_df.iloc[tr_idx], X_df.iloc[va_idx]
-            y_tr, y_va = y_vec[tr_idx], y_vec[va_idx]
-
-            clf = make_clf(random_state=seed)
-            t0 = time.time()
-            clf.fit(X_tr, y_tr)
-            fit_times.append(time.time()-t0)
-
-            t1 = time.time()
-            if hasattr(clf, "predict_proba"):
-                p = clf.predict_proba(X_va)[:,1]
-            else:
-                # decision_function fallback
-                s = clf.decision_function(X_va)
-                p = (s - s.min())/(s.max()-s.min() + 1e-12)
-            pred_times.append(time.time()-t1)
-            oof_pred[va_idx] = p
-
-        auc = roc_auc_score(y_vec, oof_pred)
-        ap  = average_precision_score(y_vec, oof_pred)
-
-        # Fit once on full data to extract "top-20" features for stability
-        clf_full = make_clf(random_state=seed)
-        clf_full.fit(X_df, y_vec)
-
-        if clf_name == "logit_en":
-            coefs = np.abs(clf_full.named_steps["clf"].coef_[0])
-            top_idx = np.argsort(coefs)[::-1][:20]
-            top_names = X_df.columns[top_idx]
-        else:
-            imp = clf_full.named_steps["clf"].feature_importances_
-            top_idx = np.argsort(imp)[::-1][:20]
-            top_names = X_df.columns[top_idx]
-
-        topk_sets.append(set(top_names))
-        rows.append({
-            "model": clf_name, "seed": seed, "auc": auc, "ap": ap,
-            "fit_time_s": float(np.sum(fit_times)), "pred_time_s": float(np.sum(pred_times))
-        })
-
-    # Stability: average pairwise Jaccard across seeds
-    jacc = []
-    for a, b in itertools.combinations(topk_sets, 2):
-        inter = len(a & b); union = len(a | b)
-        jacc.append(inter/union if union else 1.0)
-    stab = {
-        "model": clf_name,
-        "mean_auc": float(np.mean([r["auc"] for r in rows])),
-        "std_auc":  float(np.std([r["auc"] for r in rows], ddof=1)) if len(rows)>1 else 0.0,
-        "mean_ap":  float(np.mean([r["ap"] for r in rows])),
-        "std_ap":   float(np.std([r["ap"] for r in rows], ddof=1)) if len(rows)>1 else 0.0,
-        "mean_jaccard_top20": float(np.mean(jacc)) if jacc else 1.0
-    }
-    
-    print(f"{clf_name} results: AUC = {stab['mean_auc']:.4f} ± {stab['std_auc']:.4f}, "
-          f"AP = {stab['mean_ap']:.4f} ± {stab['std_ap']:.4f}")
-    
-    return pd.DataFrame(rows), stab, topk_sets
-
-from sklearn.pipeline import Pipeline
-
-def make_logit(random_state=42):
-    return Pipeline([
-        ("scaler", RobustScaler(with_centering=True)),
-        ("clf", LogisticRegression(
-            penalty="elasticnet", solver="saga", l1_ratio=0.5, C=1.0,
-            max_iter=5000, random_state=random_state, n_jobs=None
-        ))
-    ])
-
-def make_gb(random_state=42):
-    return Pipeline([
-        ("scaler", "passthrough"),
-        ("clf", GradientBoostingClassifier(
-            random_state=random_state, n_estimators=300, learning_rate=0.05, max_depth=3
-        ))
-    ])
-
-cv_logit, stab_logit, logit_topsets = cv_eval_model("logit_en", make_logit, X_model, y)
-main_progress.update(1)
-
-cv_gb,    stab_gb,    gb_topsets    = cv_eval_model("gbdt",    make_gb,    X_model, y)
-main_progress.update(1)
-
-# Save eval rows
-eval_df = pd.concat([cv_logit, cv_gb], ignore_index=True)
-eval_df.to_csv(OUT_DIR / "model_eval_summary.csv", index=False)
-
-# Save stability summary
-pcs_summary = {"logit_en": stab_logit, "gbdt": stab_gb,
-               "n_features_after_prune": int(X_model.shape[1]),
-               "n_features_before_prune": int(X.shape[1]),
-               "label": label_col}
-(Path(OUT_DIR / "pcs_stability_summary.json")).write_text(json.dumps(pcs_summary, indent=2))
-
-print("Computing final feature importances...")
-# Save feature importances from a final fit (on full data with default seed)
-final_logit = make_logit(random_state=42).fit(X_model, y)
-final_gb    = make_gb(random_state=42).fit(X_model, y)
-
-coef_abs = np.abs(final_logit.named_steps["clf"].coef_[0])
-fi_lr = pd.DataFrame({"feature": X_model.columns, "importance": coef_abs}).sort_values("importance", ascending=False)
-fi_lr.to_csv(OUT_DIR / "feature_importance_lr.csv", index=False)
-
-fi_gb = pd.DataFrame({"feature": X_model.columns, "importance": final_gb.named_steps["clf"].feature_importances_}).sort_values("importance", ascending=False)
-fi_gb.to_csv(OUT_DIR / "feature_importance_gb.csv", index=False)
-
-# Keep a human-friendly drop plan
-pd.DataFrame({
-    "kept_feature": sorted(X_model.columns)
-}).to_csv(OUT_DIR / "kept_features.csv", index=False)
-
-main_progress.update(1)
-main_progress.update(1)  # Complete final phase
-main_progress.close()
-
-print("\n=== Training Complete ===")
-print(f"Final model features: {X_model.shape[1]} (dropped {len(drop_sorted)} redundant)")
-print(f"Logistic Regression: AUC = {stab_logit['mean_auc']:.4f} ± {stab_logit['std_auc']:.4f}")
-print(f"Gradient Boosting:   AUC = {stab_gb['mean_auc']:.4f} ± {stab_gb['std_auc']:.4f}")
-print(f"Results saved to: {OUT_DIR}")
diff --git a/src/models/train_advanced.py b/src/models/train_advanced.py
deleted file mode 100644
index b76ad32..0000000
--- a/src/models/train_advanced.py
+++ /dev/null
@@ -1,294 +0,0 @@
-import os, json, warnings, math
-import numpy as np
-import pandas as pd
-from pathlib import Path
-from tqdm import tqdm
-from sklearn.model_selection import StratifiedKFold, train_test_split
-from sklearn.metrics import roc_auc_score, average_precision_score, precision_recall_curve
-from sklearn.calibration import CalibratedClassifierCV
-from sklearn.ensemble import HistGradientBoostingClassifier
-from sklearn.linear_model import LogisticRegression
-from sklearn.preprocessing import StandardScaler
-from sklearn.pipeline import Pipeline
-import joblib
-
-warnings.filterwarnings("ignore")
-SEED = 42
-np.random.seed(SEED)
-
-# ---------- I/O ----------
-print("=== Advanced Model Training Pipeline with Progress Tracking ===")
-
-# Setup progress tracking for main phases
-main_phases = [
-    "Loading data and preprocessing",
-    "Feature redundancy analysis",
-    "Guard set enforcement", 
-    "Model training with cross-validation",
-    "Model calibration",
-    "Computing final metrics",
-    "Saving outputs and artifacts"
-]
-
-main_progress = tqdm(main_phases, desc="Overall Progress")
-
-X_path = "/home/vhsingh/Parshvi_project/data/X_features.parquet"
-y_path = "/home/vhsingh/Parshvi_project/data/y_label.csv"
-guard_path_candidates = ["/data/guard_Set.txt", "/data/guard_set.txt", "/data/guard_Set.txt"]
-out_dir = Path("model_outputs"); out_dir.mkdir(parents=True, exist_ok=True)
-
-print("Loading feature matrix and labels...")
-X = pd.read_parquet(X_path)
-y_df = pd.read_csv(y_path)
-# pick the first non-id column as target (your y file contains label_union)
-target_col = [c for c in y_df.columns if c.lower() not in {"id", "row_id", "user_id"}][0]
-y = y_df[target_col].astype(int).values
-
-print(f"Loaded X: {X.shape}, y positives: {int(y.sum())} / {len(y)} (prevalence={y.mean():.4f})")
-main_progress.update(1)
-
-# ---------- OPTIONAL: drop redundancy by correlation ----------
-def drop_redundant_features(X, thr=0.97):
-    print(f"Computing correlation matrix for {X.shape[1]} features...")
-    # pairwise correlation on numeric (all)
-    corr = X.corr().abs()
-    upper = corr.where(np.triu(np.ones(corr.shape), k=1).astype(bool))
-    
-    print("Identifying redundant features...")
-    to_drop = []
-    for column in tqdm(upper.columns, desc="Checking correlations"):
-        if any(upper[column] >= thr):
-            to_drop.append(column)
-    
-    kept = [c for c in X.columns if c not in to_drop]
-    return X[kept], kept, to_drop
-
-APPLY_REDUNDANCY_PRUNE = True
-if APPLY_REDUNDANCY_PRUNE:
-    X, kept, dropped = drop_redundant_features(X, thr=0.97)
-    print(f"Redundancy prune: dropped {len(dropped)} features (|r|>=0.97) → X now {X.shape[1]} features")
-
-main_progress.update(1)
-
-# ---------- Guard enforcement ----------
-print("Building guard set...")
-guard_set = set()
-for p in guard_path_candidates:
-    if Path(p).exists():
-        guard_set |= {ln.strip() for ln in Path(p).read_text().splitlines() if ln.strip()}
-
-# also add basic outcome-like patterns as a safety net
-print("Checking for outcome-related features...")
-guard_terms = ["default", "dpd", "overdue", "arrear", "write", "chargeoff", "npa", "settle",
-               "miss", "min_due", "overlimit", "declin", "reject", "bounced", "nsf", "negative", "flag"]
-auto_guard = set()
-for c in tqdm(X.columns, desc="Scanning for guard terms"):
-    if any(t in c.lower() for t in guard_terms):
-        auto_guard.add(c)
-guard_set |= auto_guard
-
-guard_hits = [c for c in X.columns if c in guard_set]
-if guard_hits:
-    print(f"[GUARD] Removing {len(guard_hits)} guarded features: {guard_hits[:5]}{'...' if len(guard_hits)>5 else ''}")
-    X = X.drop(columns=guard_hits)
-
-print(f"Final feature set: {X.shape[1]} features after guard enforcement")
-main_progress.update(1)
-
-# ---------- Models ----------
-def train_lgb_cv(X, y, n_splits=5, seed=SEED):
-    import lightgbm as lgb
-    
-    print(f"Training LightGBM with {n_splits}-fold cross-validation...")
-    cv = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=seed)
-    oof = np.zeros(len(y))
-    feats = X.columns.tolist()
-    fi = np.zeros(len(feats))
-    metrics = []
-
-    fold_splits = list(cv.split(X, y))
-    for fold, (tr, va) in enumerate(tqdm(fold_splits, desc="LGB CV folds"), 1):
-        Xtr, Xva = X.iloc[tr], X.iloc[va]
-        ytr, yva = y[tr], y[va]
-
-        model = lgb.LGBMClassifier(
-            objective="binary",
-            n_estimators=5000,
-            learning_rate=0.02,
-            num_leaves=31,
-            max_depth=-1,
-            subsample=0.8,
-            colsample_bytree=0.8,
-            reg_alpha=0.1,
-            reg_lambda=0.2,
-            random_state=seed,
-            n_jobs=-1
-        )
-        model.fit(
-            Xtr, ytr,
-            eval_set=[(Xva, yva)],
-            eval_metric="auc",
-            callbacks=[lgb.early_stopping(stopping_rounds=300, verbose=False)]
-        )
-        p = model.predict_proba(Xva)[:, 1]
-        oof[va] = p
-        fi += model.feature_importances_
-        auc = roc_auc_score(yva, p)
-        ap  = average_precision_score(yva, p)
-        metrics.append({"fold": fold, "auc": auc, "ap": ap, "iters": model.best_iteration_})
-        print(f"[LGB] fold {fold}: AUC={auc:.4f}, AP={ap:.4f}, iters={model.best_iteration_}")
-
-    fi /= n_splits
-    return oof, pd.DataFrame({"feature": feats, "importance": fi}).sort_values("importance", ascending=False), pd.DataFrame(metrics)
-
-def train_xgb_cv(X, y, n_splits=5, seed=SEED):
-    import xgboost as xgb
-    
-    print(f"Training XGBoost with {n_splits}-fold cross-validation...")
-    cv = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=seed)
-    oof = np.zeros(len(y))
-    feats = X.columns.tolist()
-    fi = np.zeros(len(feats))
-    metrics = []
-
-    fold_splits = list(cv.split(X, y))
-    for fold, (tr, va) in enumerate(tqdm(fold_splits, desc="XGB CV folds"), 1):
-        Xtr, Xva = X.iloc[tr], X.iloc[va]
-        ytr, yva = y[tr], y[va]
-
-        model = xgb.XGBClassifier(
-            objective="binary:logistic",
-            n_estimators=5000,
-            learning_rate=0.02,
-            max_depth=6,
-            subsample=0.8,
-            colsample_bytree=0.8,
-            reg_alpha=0.1,
-            reg_lambda=0.2,
-            tree_method="hist",  # fast
-            eval_metric="auc",
-            random_state=seed,
-            n_jobs=-1,
-            early_stopping_rounds=300
-        )
-        model.fit(
-            Xtr, ytr,
-            eval_set=[(Xva, yva)],
-            verbose=False
-        )
-        p = model.predict_proba(Xva)[:, 1]
-        oof[va] = p
-        try:
-            fi += model.feature_importances_
-        except Exception:
-            pass
-        auc = roc_auc_score(yva, p)
-        ap  = average_precision_score(yva, p)
-        # In XGBoost 2.0+, best_ntree_limit is replaced with best_iteration
-        best_iter = getattr(model, 'best_iteration', getattr(model, 'best_ntree_limit', model.n_estimators))
-        metrics.append({"fold": fold, "auc": auc, "ap": ap, "iters": best_iter})
-        print(f"[XGB] fold {fold}: AUC={auc:.4f}, AP={ap:.4f}, iters={best_iter}")
-
-    return oof, pd.DataFrame({"feature": feats, "importance": fi}).sort_values("importance", ascending=False), pd.DataFrame(metrics)
-
-def train_hgb_cv(X, y, n_splits=5, seed=SEED):
-    print(f"Training HistGradientBoosting with {n_splits}-fold cross-validation...")
-    cv = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=seed)
-    oof = np.zeros(len(y))
-    feats = X.columns.tolist()
-    metrics = []
-
-    fold_splits = list(cv.split(X, y))
-    for fold, (tr, va) in enumerate(tqdm(fold_splits, desc="HGB CV folds"), 1):
-        Xtr, Xva = X.iloc[tr], X.iloc[va]
-        ytr, yva = y[tr], y[va]
-        model = HistGradientBoostingClassifier(
-            max_depth=None, max_iter=800, learning_rate=0.05, l2_regularization=1.0,
-            random_state=seed
-        )
-        model.fit(Xtr, ytr)
-        p = model.predict_proba(Xva)[:, 1]
-        oof[va] = p
-        auc = roc_auc_score(yva, p)
-        ap  = average_precision_score(yva, p)
-        metrics.append({"fold": fold, "auc": auc, "ap": ap})
-        print(f"[HGB] fold {fold}: AUC={auc:.4f}, AP={ap:.4f}")
-    return oof, None, pd.DataFrame(metrics)
-
-# Try LightGBM → XGBoost → HGB fallback
-print("Determining available gradient boosting library...")
-model_kind = None
-try:
-    import lightgbm as _; model_kind = "lgb"
-    print("✓ LightGBM available - using LightGBM")
-except Exception:
-    try:
-        import xgboost as _; model_kind = "xgb"
-        print("✓ XGBoost available - using XGBoost")
-    except Exception:
-        model_kind = "hgb"
-        print("✓ Using sklearn HistGradientBoosting")
-
-print(f"Starting {model_kind.upper()} cross-validation training...")
-if model_kind == "lgb":
-    oof, fi_df, fold_df = train_lgb_cv(X, y, n_splits=5, seed=SEED)
-elif model_kind == "xgb":
-    oof, fi_df, fold_df = train_xgb_cv(X, y, n_splits=5, seed=SEED)
-else:
-    oof, fi_df, fold_df = train_hgb_cv(X, y, n_splits=5, seed=SEED)
-
-main_progress.update(1)
-
-# ---------- Calibration (Platt) ----------
-print("Performing Platt calibration on out-of-fold predictions...")
-# We calibrate a simple LogisticRegression on OOF predictions vs. true labels.
-clf_cal = LogisticRegression(max_iter=1000).fit(oof.reshape(-1,1), y)
-oof_cal = clf_cal.predict_proba(oof.reshape(-1,1))[:,1]
-
-main_progress.update(1)
-
-# ---------- Metrics ----------
-print("Computing final performance metrics...")
-def summarize(scores):
-    return float(np.mean(scores)), float(np.std(scores))
-
-auc_cv_mean, auc_cv_std = summarize(fold_df["auc"].values)
-ap_cv_mean,  ap_cv_std  = summarize(fold_df["ap"].values)
-
-auc_oof  = roc_auc_score(y, oof)
-ap_oof   = average_precision_score(y, oof)
-auc_cal  = roc_auc_score(y, oof_cal)
-ap_cal   = average_precision_score(y, oof_cal)
-
-print(f"\n== CV Summary ({model_kind.upper()}) ==")
-print(f"AUC (fold mean±sd): {auc_cv_mean:.4f} ± {auc_cv_std:.4f}")
-print(f"AP  (fold mean±sd): {ap_cv_mean:.4f} ± {ap_cv_std:.4f}")
-print(f"AUC (OOF raw): {auc_oof:.4f} | AUC (OOF calibrated): {auc_cal:.4f}")
-print(f"AP  (OOF raw):  {ap_oof:.4f} | AP  (OOF calibrated):  {ap_cal:.4f}")
-
-main_progress.update(1)
-
-# ---------- Save artifacts ----------
-print("Saving model artifacts and reports...")
-pd.DataFrame({"oof_pred": oof, "oof_pred_cal": oof_cal, "y": y}).to_csv(out_dir/"oof_predictions.csv", index=False)
-fold_df.to_csv(out_dir/"cv_fold_metrics.csv", index=False)
-if fi_df is not None:
-    fi_df.to_csv(out_dir/"feature_importance_cv.csv", index=False)
-
-report = {
-    "model_kind": model_kind,
-    "n_rows": int(X.shape[0]),
-    "n_features": int(X.shape[1]),
-    "auc_cv_mean": auc_cv_mean, "auc_cv_std": auc_cv_std,
-    "ap_cv_mean": ap_cv_mean,   "ap_cv_std": ap_cv_std,
-    "auc_oof_raw": auc_oof, "ap_oof_raw": ap_oof,
-    "auc_oof_cal": auc_cal, "ap_oof_cal": ap_cal,
-}
-json.dump(report, open(out_dir/"model_cv_report.json","w"), indent=2)
-
-main_progress.update(1)
-main_progress.close()
-
-print(f"\n🎉 Training completed successfully!")
-print(f"📁 Artifacts written to: {out_dir}")
-print(f"🏆 Best model: {model_kind.upper()} with {auc_cv_mean:.4f} AUC")
diff --git a/src/models/train_baselines.py b/src/models/train_baselines.py
deleted file mode 100644
index c208f9a..0000000
--- a/src/models/train_baselines.py
+++ /dev/null
@@ -1,241 +0,0 @@
-#!/usr/bin/env python
-"""
-Baseline Model Training Script
-Trains Logistic Regression (ElasticNet) and sklearn Gradient Boosting with cross-validation.
-Includes redundancy pruning and PCS stability analysis.
-"""
-import os, json, time, itertools, argparse
-from pathlib import Path
-import numpy as np, pandas as pd
-from tqdm import tqdm
-from sklearn.model_selection import StratifiedKFold
-from sklearn.metrics import roc_auc_score, average_precision_score
-from sklearn.preprocessing import RobustScaler
-from sklearn.pipeline import Pipeline
-from sklearn.linear_model import LogisticRegression
-from sklearn.ensemble import GradientBoostingClassifier
-
-def load_y(y_path, prefer=("label_union","label_weighted","label_hierarchical","label_clustered")):
-    """Load target variable, preferring label_union if available."""
-    ydf = pd.read_csv(y_path)
-    for c in prefer:
-        if c in ydf.columns: 
-            return ydf[c].astype(int).values, c
-    # else last non-id column
-    cols = [c for c in ydf.columns if c.lower() not in {"id","row_id","user_id"}]
-    return ydf[cols[-1]].astype(int).values, cols[-1]
-
-def build_guard(config_dir: Path):
-    """Build guard set from configuration files."""
-    guard = set()
-    for cand in ("guard_Set.txt","guard_set.txt","do_not_use_features.txt"):
-        p = config_dir / cand
-        if p.exists():
-            for ln in p.read_text().splitlines():
-                ln = ln.strip()
-                if ln: guard.add(ln)
-    
-    # also drop label sources if present
-    sel = config_dir / "Selected_label_sources.csv"
-    if sel.exists():
-        try:
-            sdf = pd.read_csv(sel)
-            if "variable" in sdf.columns:
-                guard |= set(sdf["variable"].astype(str))
-        except Exception:
-            pass
-    
-    # dropped_features.json (identifiers)
-    drop_meta = config_dir.parent / "dropped_features.json"
-    if drop_meta.exists():
-        try:
-            jf = json.loads(drop_meta.read_text())
-            for k in ("guard","identifier","outcome_guard","not_in_raw","fill_rate_lt_threshold"):
-                for v in jf.get(k, []): guard.add(v)
-        except Exception:
-            pass
-    return guard
-
-def load_redundancy_pairs(data_dir: Path):
-    """Load redundancy pairs from QC analysis."""
-    for name in ("qc_redundancy_pairs.csv","qc_redundancyt_pairs.csv"):
-        p = data_dir / name
-        if p.exists():
-            df = pd.read_csv(p)
-            if set(["feature_i","feature_j"]) <= set(df.columns):
-                return df
-    return None
-
-def load_metrics(data_dir: Path):
-    """Load single feature AUC metrics for redundancy resolution."""
-    for name in ("qc_single_feature_metrics.csv","qc_single_feature_matrix.csv"):
-        p = data_dir / name
-        if p.exists():
-            m = pd.read_csv(p)
-            if "feature" in m.columns and "auc_1d" in m.columns:
-                return dict(zip(m["feature"], m["auc_1d"]))
-    return {}
-
-def prune_by_pairs(X, pairs_df, auc_map):
-    """Prune redundant features using graph-based approach."""
-    # Graph of highly-correlated groups from QC
-    adj = {}
-    def add(a,b):
-        adj.setdefault(a,set()).add(b)
-        adj.setdefault(b,set()).add(a)
-    
-    for _,r in pairs_df.iterrows():
-        a,b = r["feature_i"], r["feature_j"]
-        if a in X.columns and b in X.columns: 
-            add(a,b)
-    
-    keep, drop, seen = set(), set(), set()
-    for node in adj:
-        if node in seen: continue
-        # BFS to find connected component
-        q=[node]; comp=set([node]); seen.add(node)
-        while q:
-            u=q.pop()
-            for v in adj.get(u, []):
-                if v not in seen: 
-                    seen.add(v); comp.add(v); q.append(v)
-        
-        # keep best auc_1d within component
-        scored=[(f, auc_map.get(f,0.0)) for f in comp if f in X.columns]
-        if not scored: continue
-        best=max(scored, key=lambda t:t[1])[0]
-        keep.add(best)
-        for f,_ in scored:
-            if f!=best: drop.add(f)
-    
-    return sorted(keep), sorted(drop)
-
-def cv_eval(name, make_clf, X, y, n_splits=5, seeds=(42,202,404,808,1337)):
-    """Cross-validation evaluation with PCS stability analysis."""
-    rows, topk_sets = [], []
-    for seed in seeds:
-        skf = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=seed)
-        oof = np.zeros(len(y), float)
-        for tr,va in skf.split(X,y):
-            clf = make_clf(seed)
-            clf.fit(X.iloc[tr], y[tr])
-            if hasattr(clf,"predict_proba"):
-                p = clf.predict_proba(X.iloc[va])[:,1]
-            else:
-                p = clf.decision_function(X.iloc[va])
-            oof[va] = p
-        
-        auc, ap = roc_auc_score(y,oof), average_precision_score(y,oof)
-        
-        # fit once full to extract top20
-        model = make_clf(seed).fit(X,y)
-        if name=="logit_en":
-            coefs = np.abs(model.named_steps["clf"].coef_[0])
-            idx=np.argsort(coefs)[::-1][:20]
-        else:
-            imp = model.named_steps["clf"].feature_importances_
-            idx=np.argsort(imp)[::-1][:20]
-        
-        topk_sets.append(set(X.columns[idx]))
-        rows.append({"model":name,"seed":seed,"auc":auc,"ap":ap})
-    
-    # stability (Jaccard similarity of top-20 features across seeds)
-    jacc=[]
-    for a,b in itertools.combinations(topk_sets,2):
-        u=len(a|b)
-        jacc.append(len(a&b)/u if u else 1.0)
-    
-    return pd.DataFrame(rows), float(np.mean(jacc))
-
-def make_logit(seed):
-    """Create logistic regression pipeline."""
-    return Pipeline([
-        ("scaler", RobustScaler(with_centering=True)),
-        ("clf", LogisticRegression(penalty="elasticnet", solver="saga",
-                                  l1_ratio=0.5, C=1.0, max_iter=5000,
-                                  random_state=seed))
-    ])
-
-def make_gbdt(seed):
-    """Create gradient boosting pipeline."""
-    return Pipeline([
-        ("scaler","passthrough"),
-        ("clf", GradientBoostingClassifier(random_state=seed,
-                                           n_estimators=300, learning_rate=0.05, max_depth=3))
-    ])
-
-def main(args):
-    data_dir   = Path(args.data_dir)
-    config_dir = Path(args.config_dir)
-    out_dir    = Path(args.out_dir)
-    out_dir.mkdir(parents=True, exist_ok=True)
-
-    print("Loading data...")
-    X = pd.read_parquet(data_dir/"X_features.parquet")
-    y, label_col = load_y(data_dir/"y_label.csv")
-    
-    print(f"Loaded X: {X.shape}, y: {len(y)} (prevalence: {y.mean():.4f})")
-    print(f"Target column: {label_col}")
-
-    # Guard
-    guard = build_guard(config_dir)
-    guard_in_X = sorted(set(X.columns)&guard)
-    if guard_in_X:
-        print(f"Dropping {len(guard_in_X)} guarded features")
-        pd.Series(guard_in_X, name="dropped_guard").to_csv(out_dir/"qc_guard_removed.csv", index=False)
-        X = X.drop(columns=guard_in_X)
-
-    # Redundancy prune using QC graph if present
-    auc_map = load_metrics(data_dir)
-    pairs   = load_redundancy_pairs(data_dir)
-    drop = []
-    if pairs is not None:
-        print("Applying graph-based redundancy pruning...")
-        keep, drop = prune_by_pairs(X, pairs, auc_map)
-        if drop:
-            print(f"Dropping {len(drop)} redundant features")
-            X = X[keep]
-            pd.DataFrame({"dropped_redundant": drop}).to_csv(out_dir/"redundancy_drops.csv", index=False)
-    
-    print(f"Final feature set: {X.shape[1]} features")
-
-    # Cross-validation evaluation
-    print("Running cross-validation...")
-    cv_logit, jacc_l = cv_eval("logit_en", make_logit, X, y, n_splits=args.folds)
-    cv_gbdt, jacc_g  = cv_eval("gbdt",     make_gbdt,  X, y, n_splits=args.folds)
-
-    # Summaries
-    eval_df = pd.concat([cv_logit, cv_gbdt], ignore_index=True)
-    eval_df.to_csv(out_dir/"model_eval_summary.csv", index=False)
-    
-    pcs = {
-        "label": label_col,
-        "n_features_after_prune": int(X.shape[1]),
-        "guard_dropped": guard_in_X,
-        "redundancy_dropped": drop,
-        "stability": {
-            "logit_en_mean_jaccard_top20": jacc_l,
-            "gbdt_mean_jaccard_top20": jacc_g
-        },
-        "mean_auc": {
-            "logit_en": float(cv_logit["auc"].mean()),
-            "gbdt": float(cv_gbdt["auc"].mean())
-        },
-        "mean_ap": {
-            "logit_en": float(cv_logit["ap"].mean()),
-            "gbdt": float(cv_gbdt["ap"].mean())
-        }
-    }
-    
-    (out_dir/"pcs_stability_summary.json").write_text(json.dumps(pcs, indent=2))
-    
-    print("\n=== Results ===")
-    print(json.dumps(pcs, indent=2))
-
-if __name__ == "__main__":
-    ap = argparse.ArgumentParser(description="Train baseline models with stability analysis")
-    ap.add_argument("--data-dir",   default="data/processed", help="Directory containing processed data")
-    ap.add_argument("--config-dir", default="configs", help="Directory containing configuration files")
-    ap.add_argument("--out-dir",    default="artifacts/reports/baselines", help="Output directory")
-    ap.add_argument("--folds", type=int, default=5, help="Number of CV folds")
-    main(ap.parse_args())
diff --git a/src/models/train_boosters.py b/src/models/train_boosters.py
deleted file mode 100644
index 3b83756..0000000
--- a/src/models/train_boosters.py
+++ /dev/null
@@ -1,234 +0,0 @@
-#!/usr/bin/env python
-"""
-Booster Model Training Script
-Trains XGBoost, LightGBM, or HistGradientBoosting with cross-validation and calibration.
-"""
-import argparse, json
-from pathlib import Path
-import numpy as np, pandas as pd
-from tqdm import tqdm
-from sklearn.model_selection import StratifiedKFold
-from sklearn.metrics import roc_auc_score, average_precision_score
-from sklearn.linear_model import LogisticRegression
-
-def load_y(y_path):
-    """Load target variable, preferring label_union if available."""
-    ydf = pd.read_csv(y_path)
-    for c in ("label_union","label_weighted","label_hierarchical","label_clustered"):
-        if c in ydf.columns: 
-            return ydf[c].astype(int).values, c
-    cols = [c for c in ydf.columns if c.lower() not in {"id","row_id","user_id"}]
-    return ydf[cols[-1]].astype(int).values, cols[-1]
-
-def train_lgb_cv(X, y, n_splits=5, seed=42):
-    """Train LightGBM with cross-validation."""
-    import lightgbm as lgb
-    cv = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=seed)
-    oof = np.zeros(len(y))
-    feats = X.columns.tolist()
-    fi = np.zeros(len(feats))
-    rows = []
-    
-    print(f"Training LightGBM with {n_splits}-fold cross-validation...")
-    for fold,(tr,va) in enumerate(tqdm(cv.split(X,y), total=n_splits, desc="LGB CV folds"), 1):
-        model = lgb.LGBMClassifier(
-            objective="binary", 
-            n_estimators=5000, 
-            learning_rate=0.02,
-            num_leaves=31, 
-            subsample=0.8, 
-            colsample_bytree=0.8,
-            reg_alpha=0.1, 
-            reg_lambda=0.2, 
-            random_state=seed, 
-            n_jobs=-1
-        )
-        model.fit(
-            X.iloc[tr], y[tr], 
-            eval_set=[(X.iloc[va], y[va])],
-            eval_metric="auc", 
-            callbacks=[lgb.early_stopping(300, verbose=False)]
-        )
-        p = model.predict_proba(X.iloc[va])[:,1]
-        oof[va] = p
-        fi += model.feature_importances_
-        
-        auc = roc_auc_score(y[va], p)
-        ap = average_precision_score(y[va], p)
-        iters = getattr(model, "best_iteration_", model.n_estimators)
-        rows.append({"fold":fold,"auc":auc,"ap":ap,"iters":iters})
-        print(f"[LGB] fold {fold}: AUC={auc:.4f}, AP={ap:.4f}, iters={iters}")
-    
-    fi /= n_splits
-    fi_df = pd.DataFrame({"feature":feats,"importance":fi}).sort_values("importance",ascending=False)
-    fold_df = pd.DataFrame(rows)
-    
-    return "lgb", oof, fi_df, fold_df
-
-def train_xgb_cv(X, y, n_splits=5, seed=42):
-    """Train XGBoost with cross-validation."""
-    import xgboost as xgb
-    cv = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=seed)
-    oof = np.zeros(len(y))
-    feats = X.columns.tolist()
-    fi = np.zeros(len(feats))
-    rows = []
-    
-    print(f"Training XGBoost with {n_splits}-fold cross-validation...")
-    for fold,(tr,va) in enumerate(tqdm(cv.split(X,y), total=n_splits, desc="XGB CV folds"), 1):
-        model = xgb.XGBClassifier(
-            objective="binary:logistic", 
-            n_estimators=5000,
-            learning_rate=0.02, 
-            max_depth=6, 
-            subsample=0.8,
-            colsample_bytree=0.8, 
-            reg_alpha=0.1, 
-            reg_lambda=0.2,
-            tree_method="hist", 
-            eval_metric="auc", 
-            random_state=seed,
-            n_jobs=-1, 
-            early_stopping_rounds=300
-        )
-        model.fit(
-            X.iloc[tr], y[tr], 
-            eval_set=[(X.iloc[va], y[va])], 
-            verbose=False
-        )
-        p = model.predict_proba(X.iloc[va])[:,1]
-        oof[va] = p
-        
-        try: 
-            fi += model.feature_importances_
-        except: 
-            pass
-        
-        # Handle different XGBoost versions
-        best = getattr(model, "best_iteration", getattr(model,"best_ntree_limit", model.n_estimators))
-        auc = roc_auc_score(y[va], p)
-        ap = average_precision_score(y[va], p)
-        rows.append({"fold":fold,"auc":auc,"ap":ap,"iters":best})
-        print(f"[XGB] fold {fold}: AUC={auc:.4f}, AP={ap:.4f}, iters={best}")
-    
-    fi_df = pd.DataFrame({"feature":feats,"importance":fi}).sort_values("importance",ascending=False)
-    fold_df = pd.DataFrame(rows)
-    
-    return "xgb", oof, fi_df, fold_df
-
-def train_hgb_cv(X, y, n_splits=5, seed=42):
-    """Train HistGradientBoosting with cross-validation."""
-    from sklearn.ensemble import HistGradientBoostingClassifier
-    cv = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=seed)
-    oof = np.zeros(len(y))
-    rows = []
-    
-    print(f"Training HistGradientBoosting with {n_splits}-fold cross-validation...")
-    for fold,(tr,va) in enumerate(tqdm(cv.split(X,y), total=n_splits, desc="HGB CV folds"), 1):
-        model = HistGradientBoostingClassifier(
-            max_depth=None, 
-            max_iter=800,
-            learning_rate=0.05, 
-            l2_regularization=1.0,
-            random_state=seed
-        )
-        model.fit(X.iloc[tr], y[tr])
-        p = model.predict_proba(X.iloc[va])[:,1]
-        oof[va] = p
-        
-        auc = roc_auc_score(y[va], p)
-        ap = average_precision_score(y[va], p)
-        rows.append({"fold":fold,"auc":auc,"ap":ap})
-        print(f"[HGB] fold {fold}: AUC={auc:.4f}, AP={ap:.4f}")
-    
-    fold_df = pd.DataFrame(rows)
-    return "hgb", oof, None, fold_df
-
-def main(args):
-    print("Loading data...")
-    X = pd.read_parquet(Path(args.data_dir)/"X_features.parquet")
-    y, label_col = load_y(Path(args.data_dir)/"y_label.csv")
-    
-    print(f"Loaded X: {X.shape}, y: {len(y)} (prevalence: {y.mean():.4f})")
-    print(f"Target column: {label_col}")
-
-    # Optional redundancy drop by correlation
-    if args.redundancy_r > 0:
-        print(f"Applying correlation-based redundancy pruning (r >= {args.redundancy_r})...")
-        corr = X.corr().abs()
-        upper = corr.where(np.triu(np.ones(corr.shape), k=1).astype(bool))
-        to_drop = [c for c in upper.columns if (upper[c] >= args.redundancy_r).any()]
-        if to_drop:
-            print(f"Dropping {len(to_drop)} redundant features")
-            X = X.drop(columns=to_drop)
-        else:
-            print("No redundant features found")
-
-    print(f"Final feature set: {X.shape[1]} features")
-
-    # Determine which library to use
-    print("Determining available gradient boosting library...")
-    try:
-        import lightgbm as _
-        print("✓ LightGBM available - using LightGBM")
-        kind, oof, fi_df, folds = train_lgb_cv(X, y, args.folds, args.seed)
-    except ImportError:
-        try:
-            import xgboost as _
-            print("✓ XGBoost available - using XGBoost")
-            kind, oof, fi_df, folds = train_xgb_cv(X, y, args.folds, args.seed)
-        except ImportError:
-            print("✓ Using sklearn HistGradientBoosting (fallback)")
-            kind, oof, fi_df, folds = train_hgb_cv(X, y, args.folds, args.seed)
-
-    # Create output directory
-    out = Path(args.out_dir)
-    out.mkdir(parents=True, exist_ok=True)
-    
-    # Calibrate using Platt scaling
-    print("Applying Platt calibration...")
-    cal = LogisticRegression(max_iter=1000).fit(oof.reshape(-1,1), y)
-    oof_cal = cal.predict_proba(oof.reshape(-1,1))[:,1]
-
-    # Calculate metrics
-    auc_cv, ap_cv = folds["auc"].mean(), folds["ap"].mean()
-    auc_oof_raw = roc_auc_score(y, oof)
-    ap_oof_raw = average_precision_score(y, oof)
-    auc_oof_cal = roc_auc_score(y, oof_cal)
-    ap_oof_cal = average_precision_score(y, oof_cal)
-    
-    # Create report
-    report = {
-        "model_kind": kind,
-        "n_rows": int(X.shape[0]), 
-        "n_features": int(X.shape[1]),
-        "auc_cv_mean": float(auc_cv), 
-        "auc_cv_std": float(folds["auc"].std()),
-        "ap_cv_mean":  float(ap_cv),  
-        "ap_cv_std":  float(folds["ap"].std()),
-        "auc_oof_raw": float(auc_oof_raw),
-        "ap_oof_raw":  float(ap_oof_raw),
-        "auc_oof_cal": float(auc_oof_cal),
-        "ap_oof_cal":  float(ap_oof_cal),
-        "label": label_col
-    }
-    
-    # Save outputs
-    print("Saving results...")
-    pd.DataFrame({"oof_pred":oof,"oof_pred_cal":oof_cal,"y":y}).to_csv(out/"oof_predictions.csv", index=False)
-    folds.to_csv(out/"cv_fold_metrics.csv", index=False)
-    if fi_df is not None: 
-        fi_df.to_csv(out/"feature_importance_cv.csv", index=False)
-    (out/"model_cv_report.json").write_text(json.dumps(report, indent=2))
-    
-    print("\n=== Results ===")
-    print(json.dumps(report, indent=2))
-
-if __name__ == "__main__":
-    ap = argparse.ArgumentParser(description="Train gradient boosting models with cross-validation")
-    ap.add_argument("--data-dir", default="data/processed", help="Directory containing processed data")
-    ap.add_argument("--out-dir",  default="artifacts/reports/boosters", help="Output directory")
-    ap.add_argument("--seed", type=int, default=42, help="Random seed")
-    ap.add_argument("--folds", type=int, default=5, help="Number of CV folds")
-    ap.add_argument("--redundancy-r", type=float, default=0.0, help="Correlation threshold for redundancy pruning (e.g. 0.97)")
-    main(ap.parse_args())
diff --git a/src/preprocessing/smart_variable_framework.py b/src/preprocessing/smart_variable_framework.py
index 4150da9..bd73390 100644
--- a/src/preprocessing/smart_variable_framework.py
+++ b/src/preprocessing/smart_variable_framework.py
@@ -44,11 +44,123 @@ warnings.filterwarnings("ignore")
 # CONFIGURATION
 # =============================================
 
+# ==== [NEW HELPERS FOR WINDOWS, GUARDS, PRUNING] ==========================
+import re
+from datetime import datetime
+from sklearn.metrics import roc_auc_score
+
+WINDOW_PATTERNS = {
+    "1m": re.compile(r"\b(last\s*1\s*month|1m|30d)\b", re.I),
+    "3m": re.compile(r"\b(last\s*3\s*month|3m|90d)\b", re.I),
+    "6m": re.compile(r"\b(last\s*6\s*month|6m|180d)\b", re.I),
+    "12m": re.compile(r"\b(last\s*12\s*month|12m|360d|1\s*year)\b", re.I),
+    "lt": re.compile(r"\b(life\s*time|lifetime|ever|since\s*inception)\b", re.I),
+}
+
+OUTCOME_PAT = re.compile(
+    r"(write[\s-]?off|charge[\s-]?off|npa|default|dpd|over[-\s]?limit|"
+    r"over\s?due|overdue|past.?due|arrear|min[_\s-]?due|mindue|miss(?:ed|ing)?|"
+    r"declin\w*|reject\w*|insufficient|penalt\w*|bounc\w*|ecs|nach|negative\w*)",
+    re.I
+)
+
+ID_PAT = re.compile(r"(?:^|_)(id|uuid|pan|aadhaar|account|application|lead|mobile|email)(?:_|$)", re.I)
+
+def infer_window(name: str, desc: str) -> str:
+    s = f"{name} {desc}".lower()
+    for tag, pat in WINDOW_PATTERNS.items():
+        if pat.search(s):
+            return tag
+    return "unknown"
+
+def is_outcome_like(name: str, desc: str) -> bool:
+    s = f"{name} {desc}".lower()
+    return bool(OUTCOME_PAT.search(s))
+
+def variable_family(varname: str) -> str:
+    """Group variables by a coarse 'family' key to guard whole families."""
+    v = str(varname).lower()
+    m = re.match(r"var(\d{3})", v)  # var201xxx -> var201
+    if m:
+        return f"var{m.group(1)}"
+    # fallback: prefix until first underscore
+    return v.split("_")[0]
+
+def id_like_columns(cols):
+    return {c for c in cols if ID_PAT.search(str(c))}
+
+def near_unique_columns(df: pd.DataFrame, thresh: float = 0.98):
+    out = set()
+    n = len(df)
+    for c in df.columns:
+        try:
+            u = df[c].nunique(dropna=False)
+            if u >= thresh * n:
+                out.add(c)
+        except Exception:
+            pass
+    return out
+
+def too_predictive_guard(dfX: pd.DataFrame, y: pd.Series, max_auc: float = 0.88, sample: int = 12000, seed: int = 42):
+    """Smell test: any single raw feature with >max_auc AUC is suspicious."""
+    rng = np.random.default_rng(seed)
+    n = len(y)
+    idx = rng.choice(n, size=min(sample, n), replace=False)
+    flags = set()
+    yv = y.iloc[idx] if hasattr(y, "iloc") else y[idx]
+    for c in dfX.columns:
+        try:
+            xv = pd.to_numeric(dfX[c], errors="coerce").fillna(0).values
+            auc = roc_auc_score(yv, xv[idx]) if hasattr(xv, "__getitem__") else roc_auc_score(yv, xv)
+            if auc > max_auc or auc < (1 - max_auc):
+                flags.add(c)
+        except Exception:
+            continue
+    return flags
+
+def prune_correlated(X: pd.DataFrame, corr_thr: float = 0.95, keep_priority: pd.Series | None = None):
+    """
+    Drop one feature from each highly correlated pair (> corr_thr).
+    If keep_priority is provided (higher is more important), we keep the higher-priority feature.
+    """
+    if X.shape[1] <= 1:
+        return X.copy(), []
+
+    corr = X.corr().abs()
+    upper = corr.where(np.triu(np.ones(corr.shape), k=1).astype(bool))
+
+    to_drop = set()
+    for col in upper.columns:
+        high = upper.index[upper[col] > corr_thr].tolist()
+        for h in high:
+            if h in to_drop or col in to_drop:
+                continue
+            if keep_priority is not None:
+                ka = float(keep_priority.get(col, 0.0))
+                kb = float(keep_priority.get(h, 0.0))
+                drop = col if ka < kb else h
+            else:
+                # default: drop the later column alphabetically to be deterministic
+                drop = max(col, h)
+            to_drop.add(drop)
+
+    kept = [c for c in X.columns if c not in to_drop]
+    return X[kept].copy(), sorted(list(to_drop))
+
+def time_safe_feature_mask(feature_names: list[str], descriptions: dict[str, str], forbidden_windows: set[str]):
+    """Mask out features whose window collides with forbidden windows (e.g., {'lt'} to remove lifetime features)."""
+    mask_keep = []
+    for f in feature_names:
+        w = infer_window(f, descriptions.get(f, ""))
+        mask_keep.append(w not in forbidden_windows)
+    return pd.Series(mask_keep, index=feature_names)
+# ========================================================================
+
 @dataclass
 class FrameworkConfig:
     # File paths
-    raw_data_path: str = "50k_users_merged_data_userfile_updated_shopping.csv"
-    dictionary_path: str = "Internal_Algo360VariableDictionary_WithExplanation.xlsx"
+    raw_data_path: str = "/home/vhsingh/Parshvi_project/data/raw/50k_users_merged_data_userfile_updated_shopping.csv"
+    dictionary_path: str = "/home/vhsingh/Parshvi_project/data/raw/Internal_Algo360VariableDictionary_WithExplanation.xlsx"
     variable_catalog_path: str = "variable_catalog.csv"
 
     # Sampling
@@ -224,10 +336,18 @@ class LabelIdentifier:
                     )
                 })
 
-        result_df = pd.DataFrame(negative_matches).sort_values(
-            ['recommended_for_label', 'priority_score', 'pattern_count'],
-            ascending=[False, False, False]
-        )
+        if negative_matches:
+            result_df = pd.DataFrame(negative_matches).sort_values(
+                ['recommended_for_label', 'priority_score', 'pattern_count'],
+                ascending=[False, False, False]
+            )
+        else:
+            # Create empty DataFrame with expected columns
+            result_df = pd.DataFrame(columns=[
+                'variable', 'description', 'matched_patterns', 'pattern_count',
+                'is_binary', 'positive_rate', 'positive_count', 'missing_pct',
+                'unique_count', 'priority_score', 'recommended_for_label'
+            ])
 
         print(f"   Found {len(result_df)} variables matching negative patterns")
         if len(result_df) > 0:
@@ -264,6 +384,8 @@ class LabelIdentifier:
             pos_rate = float(series.mean()) if is_binary and len(series) > 0 else np.nan
 
             outcome_info = self.score_variable_as_outcome(col, desc)
+            window_tag = infer_window(col, desc)
+            lifetime_flag = (window_tag == "lt")
 
             quality_score = 1.0
             if missing_pct > 0.8:
@@ -276,6 +398,8 @@ class LabelIdentifier:
             candidates.append({
                 'variable': col,
                 'description': desc[:200],
+                'window': window_tag,
+                'is_lifetime_window': lifetime_flag,
                 'outcome_score': outcome_info['outcome_score'],
                 'outcome_type': outcome_info['outcome_type'],
                 'matching_keywords': '; '.join(outcome_info['matching_keywords']),
@@ -300,6 +424,7 @@ class LabelIdentifier:
         )
         return result_df
 
+
 # =============================================
 # COMPOSITE LABEL BUILDER
 # =============================================
@@ -443,28 +568,42 @@ class CompositeLabelBuilder:
                 shares.append((c, float(ld[c][pos].mean())))
             return sorted(shares, key=lambda x: x[1], reverse=True)
 
-        # Dominance prune (NON-FATAL)
-        union_now = label_union.copy()
+        # Dominance prune (NON-FATAL) with safety
+        def compute_union(ld): return (ld.sum(axis=1) > 0).astype(int)
+        union_now = compute_union(label_data)
+
+        def quick_prev(ld):  # simple proxy; we keep prevalence stable within a tiny tolerance
+            u = compute_union(ld)
+            return float(u.mean())
+
+        best_prev = float(union_now.mean())
+        best_ld = label_data.copy(); best_meta = meta.copy()
         pruned = []
         while True:
             contrib = contribution(label_data, union_now)
             dom = [c for c, s in contrib if s >= self.config.dominance_cutoff]
             if not dom:
                 break
-            for c in dom:
-                pruned.append(c)
-                label_data = label_data.drop(columns=[c])
-                meta.pop(c, None)
-            if label_data.shape[1] == 0:
-                print("   ⚠️ Dominance prune would remove all sources; skipping dominance prune for this config.")
-                label_data = _label_data_backup
-                meta = _meta_backup
+            trial = label_data.drop(columns=dom)
+            if trial.shape[1] == 0:
+                break
+            new_prev = quick_prev(trial)
+            # only accept prune if prevalence doesn't drop materially
+            if new_prev >= best_prev - 0.002:
+                for c in dom:
+                    pruned.append(c)
+                    meta.pop(c, None)
+                label_data = trial
+                union_now = compute_union(label_data)
+                best_prev = new_prev
+            else:
+                # stop pruning if it starts harming union coverage
                 break
-            union_now = compute_union(label_data)
 
         if pruned:
             print(f"   🪓 Dominance prune removed {len(pruned)} source(s) with share≥{self.config.dominance_cutoff}")
 
+
         # Recompute variants from the pruned (or restored) set
         severe_cols = [c for c in label_data.columns if meta[c]['weight'] >= sev_thr]
         union_base = label_data[severe_cols] if len(severe_cols) > 0 else label_data
@@ -726,7 +865,19 @@ class SmartFeatureSelector:
             if len(X_processed.columns) == 0:
                 continue
 
-            feature_scores = self._multi_method_selection(X_processed, y)
+            try:
+                var_series = X_processed.var(numeric_only=True)
+                X_processed_pruned, dropped_local = prune_correlated(
+                    X_processed, corr_thr=self.config.max_correlation_threshold,
+                    keep_priority=var_series
+                )
+                if len(dropped_local) > 0:
+                    print(f"   [corr-prune] Dropped {len(dropped_local)} encoded features for label={label_col}")
+                X_use = X_processed_pruned
+            except Exception:
+                X_use = X_processed
+
+            feature_scores = self._multi_method_selection(X_use, y)
             results[label_col] = feature_scores
 
         return results
@@ -785,14 +936,32 @@ class SmartFeatureSelector:
 
 def build_leakage_guard(header_cols: List[str], descriptions: Dict[str, str],
                         label_sources: List[str], outcome_guard_terms: Tuple[str, ...]) -> set:
+    """
+    Build a guard set with:
+      1) the explicit label sources
+      2) any column whose text matches outcome terms
+      3) full 'families' of label sources (e.g., var201xxx -> all var201***)
+      4) ID-like & near-unique columns (added later once df is available)
+    """
     pat = re.compile("|".join(outcome_guard_terms), re.IGNORECASE)
     guard = set(label_sources)
+
+    # outcome-like by text
     for c in header_cols:
         txt = (c + " " + descriptions.get(c, "")).lower()
-        if pat.search(txt):
+        if pat.search(txt) or is_outcome_like(c, descriptions.get(c, "")):
             guard.add(c)
+
+    # guard whole families of label sources
+    label_fams = {variable_family(c) for c in label_sources}
+    for c in header_cols:
+        fam = variable_family(c)
+        if fam in label_fams:
+            guard.add(c)
+
     return guard
 
+
 def jaccard_series(a: pd.Series, b: pd.Series) -> float:
     A = a.astype(bool).values; B = b.astype(bool).values
     inter = (A & B).sum(); union = (A | B).sum()
@@ -878,8 +1047,14 @@ class SmartVariableFramework:
         print("STEP 1A: NEGATIVE PATTERN VARIABLE DISCOVERY")
         print("="*50)
         negative_pattern_vars = self.label_identifier.find_negative_pattern_variables(df, descriptions)
-        negative_pattern_vars.to_csv("negative_pattern_variables.csv", index=False)
-        print(f"💾 Saved negative pattern analysis to negative_pattern_variables.csv")
+        
+        # Create interim directory for outputs
+        import os
+        interim_dir = "/home/vhsingh/Parshvi_project/data/interim"
+        os.makedirs(interim_dir, exist_ok=True)
+        
+        negative_pattern_vars.to_csv(f"{interim_dir}/negative_pattern_variables.csv", index=False)
+        print(f"💾 Saved negative pattern analysis to {interim_dir}/negative_pattern_variables.csv")
 
         high_priority_negatives = negative_pattern_vars[negative_pattern_vars['recommended_for_label']]
         print(f"📊 Found {len(high_priority_negatives)} high-priority negative pattern variables")
@@ -889,8 +1064,8 @@ class SmartVariableFramework:
         print("STEP 1B: COMPREHENSIVE LABEL IDENTIFICATION")
         print("="*50)
         label_candidates = self.label_identifier.analyze_candidates(df, descriptions)
-        label_candidates.to_csv("smart_label_candidates.csv", index=False)
-        print(f"💾 Saved general label analysis to smart_label_candidates.csv")
+        label_candidates.to_csv(f"{interim_dir}/smart_label_candidates.csv", index=False)
+        print(f"💾 Saved general label analysis to {interim_dir}/smart_label_candidates.csv")
 
         eligible_labels = label_candidates[label_candidates['eligible_for_label']]
         print(f"📊 Found {len(eligible_labels)} eligible label variables")
@@ -929,7 +1104,7 @@ class SmartVariableFramework:
                     share = float(b[pos_mask].mean()) if pos_mask.any() else 0.0
                     contrib_rows.append((ev, share, descriptions.get(ev, "")[:120]))
             contrib_df = pd.DataFrame(contrib_rows, columns=["event","share_among_positives","description"]).sort_values("share_among_positives", ascending=False)
-            contrib_df.to_csv("event_contribution_summary.csv", index=False)
+            contrib_df.to_csv(f"{interim_dir}/event_contribution_summary.csv", index=False)
 
             # Overlap matrix
             jvars = [ev for ev in label_sources if ev in df.columns]
@@ -939,22 +1114,22 @@ class SmartVariableFramework:
                 for j in range(i, len(jvars)):
                     sj = (pd.to_numeric(df[jvars[j]], errors='coerce').fillna(0) > 0).astype(int)
                     J.iloc[i, j] = J.iloc[j, i] = jaccard_series(si, sj)
-            J.to_csv("jaccard_matrix.csv")
+            J.to_csv(f"{interim_dir}/jaccard_matrix.csv")
 
         if 'label_weighted' in labels_df.columns:
             thr = labels_df.attrs.get('weighted_threshold', None)
-            with open("weighted_label_meta.json","w") as f:
+            with open(f"{interim_dir}/weighted_label_meta.json","w") as f:
                 json.dump({"weighted_threshold": thr,
                            "target_prev": float(labels_df['label_union'].mean() if 'label_union' in labels_df.columns else np.nan)}, f, indent=2)
 
-        with open("do_not_use_features.txt","w") as f:
+        with open(f"{interim_dir}/do_not_use_features.txt","w") as f:
             for g in sorted(guard_set):
                 f.write(g + "\n")
         print(f"🛡️  Leakage guard size: {len(guard_set)}")
 
         if len(labels_df) > 0:
-            labels_df.to_csv("composite_labels.csv", index=False)
-            print(f"💾 Saved {len(labels_df.columns)} label variants to composite_labels.csv")
+            labels_df.to_csv(f"{interim_dir}/composite_labels.csv", index=False)
+            print(f"💾 Saved {len(labels_df.columns)} label variants to {interim_dir}/composite_labels.csv")
 
             print("\n📈 Label Variant Statistics:")
             for col in labels_df.columns:
@@ -965,17 +1140,95 @@ class SmartVariableFramework:
             print("⚠️ No composite labels could be created")
             return {'status': 'failed', 'reason': 'No eligible label variables found'}
 
+        # === [NEW BLOCK] Time-safety & additional guards ====================================
+        # 1) For Mode A (snapshot): forbid lifetime features from feature set if labels use lifetime
+        label_windows_used = []
+        for ev, m in label_meta.items():
+            label_windows_used.append(infer_window(ev, m.get('description', '')))
+        label_windows_used = set(w for w in label_windows_used if w != "unknown")
+
+        forbidden_windows = set()
+        if "lt" in label_windows_used or self.config.include_lifetime_in_label:
+            # forbid lifetime (lt) features to reduce leakage
+            forbidden_windows.add("lt")
+
+        # Also forbid outcome-like features by text (this duplicates text guard, but keeps mask explicit)
+        feature_cols_all = [c for c in df.columns if c not in labels_df.columns]  # exclude label columns
+        feature_cols_all = [c for c in feature_cols_all if c not in guard_set]    # first-pass guard
+
+        mask = time_safe_feature_mask(feature_cols_all, descriptions, forbidden_windows)
+        feature_cols_time_safe = [feature_cols_all[i] for i, keep in enumerate(mask) if keep]
+
+        # 2) Add ID-like & near-unique guards
+        guard_set |= id_like_columns(df.columns)
+        guard_set |= near_unique_columns(df)
+
+        # 3) Optional "too-predictive" smell-test guard (uses label_union if present)
+        try:
+            y_for_guard = None
+            for preferred in ["label_union", "label_hierarchical", "label_weighted", "label_clustered"]:
+                if preferred in labels_df.columns:
+                    y_for_guard = labels_df[preferred]
+                    break
+            if y_for_guard is not None:
+                numX_guard = df[feature_cols_time_safe].select_dtypes(include=['number'])
+                guard_set |= too_predictive_guard(numX_guard, y_for_guard, max_auc=0.90)
+        except Exception:
+            pass
+
+        # Make the final candidate feature list now (after guards)
+        feature_cols_time_safe = [c for c in feature_cols_time_safe if c not in guard_set]
+        Path(f"{interim_dir}/do_not_use_features.txt").write_text("\n".join(sorted(guard_set)))
+        print(f"🛡️  Leakage guard size (post time/ID/unique/predictive): {len(guard_set)}")
+        print(f"✅ Time-safe feature candidates: {len(feature_cols_time_safe)}")
+        # ===============================================================================
+
         # Step 3: Feature quality
         print("\n" + "="*50)
         print("STEP 3: FEATURE QUALITY ANALYSIS")
         print("="*50)
         feature_quality = self.feature_selector.analyze_feature_quality(df, descriptions)
-        feature_quality.to_csv("variable_quality_report.csv", index=False)
-        print(f"💾 Saved feature analysis to variable_quality_report.csv")
+        feature_quality.to_csv(f"{interim_dir}/variable_quality_report.csv", index=False)
+        print(f"💾 Saved feature analysis to {interim_dir}/variable_quality_report.csv")
 
         usable_features = feature_quality[feature_quality['usable_for_modeling']]
         print(f"📊 {len(usable_features)} features suitable for modeling (out of {len(feature_quality)})")
 
+        # === [NEW BLOCK] Correlation pruning on numeric features ===================
+        print("\n" + "="*50)
+        print("STEP 3B: CORRELATION PRUNING")
+        print("="*50)
+
+        # Keep only features that passed time/guard filters and are "usable_for_modeling"
+        feature_quality = feature_quality.copy()
+        usable_mask = feature_quality['usable_for_modeling'] & feature_quality['variable'].isin(feature_cols_time_safe)
+        usable = feature_quality[usable_mask].copy()
+
+        # Apply your fill-rate rule: Fill rate ≥ 0.85 (i.e., missing ≤ 0.15)
+        usable = usable[usable['missing_pct'] <= (1.0 - 0.85)]
+
+        # Numeric-only for pruning
+        num_keep = [c for c in usable['variable'] if c in df.columns and pd.api.types.is_numeric_dtype(df[c])]
+
+        # Impute quickly to compute corr
+        imp_vals = df[num_keep].copy()
+        imp_vals = imp_vals.fillna(imp_vals.median(numeric_only=True))
+
+        # Use quality_score as priority to keep the better one in a correlated pair
+        priority = usable.set_index('variable')['quality_score']
+
+        X_pruned, dropped_corr = prune_correlated(imp_vals, corr_thr=self.config.max_correlation_threshold, keep_priority=priority)
+
+        kept_features = X_pruned.columns.tolist()
+        dropped_features = sorted(set(num_keep) - set(kept_features))
+
+        # Persist keep/drop lists for training scripts
+        Path(f"{interim_dir}/feature_keep_list.txt").write_text("\n".join(kept_features))
+        Path(f"{interim_dir}/feature_drop_corr.txt").write_text("\n".join(dropped_features))
+        print(f"🔗 Correlation pruning: kept={len(kept_features)}, dropped={len(dropped_features)} (> r={self.config.max_correlation_threshold})")
+        # ================================================================================
+
+
         # Step 4: Feature selection
         print("\n" + "="*50)
         print("STEP 4: FEATURE SELECTION")
@@ -1000,8 +1253,8 @@ class SmartVariableFramework:
             feature_matrix['avg_importance'] = feature_matrix[score_cols].mean(axis=1)
 
             feature_matrix = feature_matrix.sort_values('avg_importance', ascending=False)
-            feature_matrix.to_csv("feature_importance_matrix.csv", index=False)
-            print(f"💾 Saved feature importance matrix to feature_importance_matrix.csv")
+            feature_matrix.to_csv(f"{interim_dir}/feature_importance_matrix.csv", index=False)
+            print(f"💾 Saved feature importance matrix to {interim_dir}/feature_importance_matrix.csv")
 
         # Step 5: Recommendations
         print("\n" + "="*50)
@@ -1011,11 +1264,11 @@ class SmartVariableFramework:
             label_candidates, labels_df, feature_quality, feature_selections, negative_pattern_vars
         )
 
-        with open("recommended_pipeline.json", "w") as f:
+        with open(f"{interim_dir}/recommended_pipeline.json", "w") as f:
             json.dump(recommendations, f, indent=2, default=str)
-        print("💾 Saved recommendations to recommended_pipeline.json")
+        print(f"💾 Saved recommendations to {interim_dir}/recommended_pipeline.json")
 
-        self._generate_report(label_candidates, labels_df, feature_quality, recommendations, negative_pattern_vars)
+        self._generate_report(label_candidates, labels_df, feature_quality, recommendations, negative_pattern_vars, interim_dir)
 
         print("\n✅ Smart Variable Framework Analysis Complete!")
         print("="*60)
@@ -1098,10 +1351,11 @@ class SmartVariableFramework:
 
     def _generate_report(self, label_candidates: pd.DataFrame, labels_df: pd.DataFrame,
                          feature_quality: pd.DataFrame, recommendations: Dict,
-                         negative_pattern_vars: pd.DataFrame = None):
+                         negative_pattern_vars: pd.DataFrame = None, interim_dir: str = None):
         """Generate comprehensive markdown report"""
 
-        with open("smart_framework_report.md", "w") as f:
+        report_path = f"{interim_dir}/smart_framework_report.md" if interim_dir else "smart_framework_report.md"
+        with open(report_path, "w") as f:
             f.write("# Smart Variable Framework - Analysis Report\n\n")
             f.write(f"**Generated:** {pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
 
@@ -1210,7 +1464,7 @@ class SmartVariableFramework:
             f.write("- `recommended_pipeline.json` - Machine-readable recommendations\n")
             f.write("- `smart_framework_report.md` - This comprehensive report\n")
 
-        print("💾 Saved comprehensive report to smart_framework_report.md")
+        print(f"💾 Saved comprehensive report to {report_path}")
 
 # =============================================
 # HYPERPARAMETER SWEEP
diff --git a/src/train_gbdt_sweep.py b/src/train_gbdt_sweep.py
deleted file mode 100644
index f59314f..0000000
--- a/src/train_gbdt_sweep.py
+++ /dev/null
@@ -1,300 +0,0 @@
-# train_gbdt_sweep.py
-import json, numpy as np, pandas as pd
-from pathlib import Path
-from tqdm import tqdm
-import optuna
-from sklearn.model_selection import StratifiedKFold
-from sklearn.metrics import roc_auc_score, average_precision_score
-
-from .metrics import summarize_all
-from .io_utils import load_xy, dump_json, save_df
-
-try:
-    import wandb
-    HAS_WANDB = True
-except ImportError:
-    HAS_WANDB = False
-
-def cv_score_xgb(X, y, params, n_splits=5, seed=42):
-    """Cross-validation scoring for XGBoost with early stopping."""
-    import xgboost as xgb
-    
-    skf = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=seed)
-    scores = []
-    
-    for fold, (tr, va) in enumerate(skf.split(X, y)):
-        model = xgb.XGBClassifier(**params)
-        model.fit(
-            X.iloc[tr], y[tr],
-            eval_set=[(X.iloc[va], y[va])],
-            eval_metric="auc",
-            verbose=False
-        )
-        pred = model.predict_proba(X.iloc[va])[:, 1]
-        auc = roc_auc_score(y[va], pred)
-        scores.append(auc)
-    
-    return np.mean(scores), np.std(scores)
-
-def cv_score_lgb(X, y, params, n_splits=5, seed=42):
-    """Cross-validation scoring for LightGBM with early stopping."""
-    import lightgbm as lgb
-    
-    skf = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=seed)
-    scores = []
-    
-    for fold, (tr, va) in enumerate(skf.split(X, y)):
-        model = lgb.LGBMClassifier(**params)
-        model.fit(
-            X.iloc[tr], y[tr],
-            eval_set=[(X.iloc[va], y[va])],
-            eval_metric="auc",
-            callbacks=[lgb.early_stopping(100, verbose=False)]
-        )
-        pred = model.predict_proba(X.iloc[va])[:, 1]
-        auc = roc_auc_score(y[va], pred)
-        scores.append(auc)
-    
-    return np.mean(scores), np.std(scores)
-
-def objective_xgb(trial, X, y, n_splits, seed, use_wandb=False):
-    """Optuna objective for XGBoost hyperparameter optimization."""
-    params = {
-        'objective': 'binary:logistic',
-        'eval_metric': 'auc',
-        'tree_method': 'hist',
-        'random_state': seed,
-        'n_jobs': -1,
-        
-        # Hyperparameters to optimize
-        'n_estimators': trial.suggest_int('n_estimators', 500, 2000),
-        'learning_rate': trial.suggest_float('learning_rate', 0.01, 0.3, log=True),
-        'max_depth': trial.suggest_int('max_depth', 3, 10),
-        'subsample': trial.suggest_float('subsample', 0.6, 1.0),
-        'colsample_bytree': trial.suggest_float('colsample_bytree', 0.6, 1.0),
-        'reg_alpha': trial.suggest_float('reg_alpha', 1e-8, 10.0, log=True),
-        'reg_lambda': trial.suggest_float('reg_lambda', 1e-8, 10.0, log=True),
-        'min_child_weight': trial.suggest_int('min_child_weight', 1, 10),
-        'early_stopping_rounds': 100
-    }
-    
-    mean_auc, std_auc = cv_score_xgb(X, y, params, n_splits, seed)
-    
-    # Log to wandb if enabled
-    if use_wandb and HAS_WANDB:
-        wandb.log({
-            'trial': trial.number,
-            'cv_auc_mean': mean_auc,
-            'cv_auc_std': std_auc,
-            **{f'param_{k}': v for k, v in params.items() if k not in ['objective', 'eval_metric', 'tree_method', 'random_state', 'n_jobs']}
-        })
-    
-    return mean_auc
-
-def objective_lgb(trial, X, y, n_splits, seed, use_wandb=False):
-    """Optuna objective for LightGBM hyperparameter optimization."""
-    params = {
-        'objective': 'binary',
-        'metric': 'auc',
-        'boosting_type': 'gbdt',
-        'random_state': seed,
-        'n_jobs': -1,
-        'verbose': -1,
-        
-        # Hyperparameters to optimize
-        'n_estimators': trial.suggest_int('n_estimators', 500, 2000),
-        'learning_rate': trial.suggest_float('learning_rate', 0.01, 0.3, log=True),
-        'num_leaves': trial.suggest_int('num_leaves', 10, 300),
-        'max_depth': trial.suggest_int('max_depth', 3, 10),
-        'subsample': trial.suggest_float('subsample', 0.6, 1.0),
-        'colsample_bytree': trial.suggest_float('colsample_bytree', 0.6, 1.0),
-        'reg_alpha': trial.suggest_float('reg_alpha', 1e-8, 10.0, log=True),
-        'reg_lambda': trial.suggest_float('reg_lambda', 1e-8, 10.0, log=True),
-        'min_child_samples': trial.suggest_int('min_child_samples', 5, 100),
-    }
-    
-    mean_auc, std_auc = cv_score_lgb(X, y, params, n_splits, seed)
-    
-    # Log to wandb if enabled
-    if use_wandb and HAS_WANDB:
-        wandb.log({
-            'trial': trial.number,
-            'cv_auc_mean': mean_auc,
-            'cv_auc_std': std_auc,
-            **{f'param_{k}': v for k, v in params.items() if k not in ['objective', 'metric', 'boosting_type', 'random_state', 'n_jobs', 'verbose']}
-        })
-    
-    return mean_auc
-
-def main():
-    import argparse
-    ap = argparse.ArgumentParser(description="GBDT Hyperparameter Sweep with Optuna")
-    ap.add_argument("--data-root", default="data/processed", help="Data directory")
-    ap.add_argument("--out-dir", default="model_outputs/gbdt_sweep", help="Output directory")
-    ap.add_argument("--algo", choices=["xgb", "lgb"], default="xgb", help="Algorithm to optimize")
-    ap.add_argument("--trials", type=int, default=60, help="Number of optimization trials")
-    ap.add_argument("--n-splits", type=int, default=5, help="CV folds")
-    ap.add_argument("--seed", type=int, default=42, help="Random seed")
-    ap.add_argument("--wandb", action="store_true", help="Enable Weights & Biases logging")
-    args = ap.parse_args()
-    
-    # Create output directory
-    Path(args.out_dir).mkdir(parents=True, exist_ok=True)
-    
-    # Load data
-    print("Loading data...")
-    X, y, target_col = load_xy(args.data_root)
-    print(f"Loaded X: {X.shape}, y: {len(y)} (prevalence: {y.mean():.4f})")
-    print(f"Target column: {target_col}")
-    
-    # Initialize wandb if requested
-    use_wandb = args.wandb and HAS_WANDB
-    if use_wandb:
-        wandb.init(
-            project="Risk Score",
-            name=f"{args.algo.upper()}_sweep_{args.trials}trials",
-            config={
-                "algorithm": args.algo,
-                "trials": args.trials,
-                "n_splits": args.n_splits,
-                "seed": args.seed,
-                "n_samples": len(y),
-                "n_features": X.shape[1],
-                "prevalence": float(y.mean())
-            }
-        )
-    
-    # Create study
-    study = optuna.create_study(direction='maximize', seed=args.seed)
-    
-    # Define objective function
-    if args.algo == "xgb":
-        objective_func = lambda trial: objective_xgb(trial, X, y, args.n_splits, args.seed, use_wandb)
-        print(f"Starting XGBoost hyperparameter optimization with {args.trials} trials...")
-    else:
-        objective_func = lambda trial: objective_lgb(trial, X, y, args.n_splits, args.seed, use_wandb)
-        print(f"Starting LightGBM hyperparameter optimization with {args.trials} trials...")
-    
-    # Run optimization
-    study.optimize(objective_func, n_trials=args.trials, show_progress_bar=True)
-    
-    # Get best parameters
-    best_params = study.best_params.copy()
-    best_score = study.best_value
-    
-    print(f"\nOptimization complete!")
-    print(f"Best CV AUC: {best_score:.6f}")
-    print(f"Best parameters: {json.dumps(best_params, indent=2)}")
-    
-    # Save results
-    results = {
-        "algorithm": args.algo,
-        "best_score": float(best_score),
-        "best_params": best_params,
-        "n_trials": args.trials,
-        "target_column": target_col
-    }
-    
-    dump_json(results, Path(args.out_dir) / "best_params.json")
-    
-    # Save all trials
-    trials_df = study.trials_dataframe()
-    save_df(trials_df, Path(args.out_dir) / "all_trials.csv")
-    
-    # Train final model with best parameters and get OOF predictions
-    print("Training final model with best parameters...")
-    
-    if args.algo == "xgb":
-        import xgboost as xgb
-        final_params = {
-            'objective': 'binary:logistic',
-            'eval_metric': 'auc',
-            'tree_method': 'hist',
-            'random_state': args.seed,
-            'n_jobs': -1,
-            **best_params
-        }
-        
-        skf = StratifiedKFold(n_splits=args.n_splits, shuffle=True, random_state=args.seed)
-        oof = np.zeros(len(y))
-        
-        for fold, (tr, va) in enumerate(skf.split(X, y)):
-            model = xgb.XGBClassifier(**final_params)
-            model.fit(
-                X.iloc[tr], y[tr],
-                eval_set=[(X.iloc[va], y[va])],
-                eval_metric="auc",
-                verbose=False
-            )
-            pred = model.predict_proba(X.iloc[va])[:, 1]
-            oof[va] = pred
-    
-    else:  # LightGBM
-        import lightgbm as lgb
-        final_params = {
-            'objective': 'binary',
-            'metric': 'auc',
-            'boosting_type': 'gbdt',
-            'random_state': args.seed,
-            'n_jobs': -1,
-            'verbose': -1,
-            **best_params
-        }
-        
-        skf = StratifiedKFold(n_splits=args.n_splits, shuffle=True, random_state=args.seed)
-        oof = np.zeros(len(y))
-        
-        for fold, (tr, va) in enumerate(skf.split(X, y)):
-            model = lgb.LGBMClassifier(**final_params)
-            model.fit(
-                X.iloc[tr], y[tr],
-                eval_set=[(X.iloc[va], y[va])],
-                eval_metric="auc",
-                callbacks=[lgb.early_stopping(100, verbose=False)]
-            )
-            pred = model.predict_proba(X.iloc[va])[:, 1]
-            oof[va] = pred
-    
-    # Calculate final metrics
-    final_auc = roc_auc_score(y, oof)
-    final_ap = average_precision_score(y, oof)
-    
-    print(f"Final OOF AUC: {final_auc:.6f}")
-    print(f"Final OOF AP: {final_ap:.6f}")
-    
-    # Save OOF predictions
-    oof_df = pd.DataFrame({
-        'oof_pred': oof,
-        'y_true': y
-    })
-    save_df(oof_df, Path(args.out_dir) / "oof_predictions.csv")
-    
-    # Generate summary metrics
-    summary, deciles = summarize_all(y, oof, label=f"{args.algo}_best")
-    save_df(deciles, Path(args.out_dir) / "decile_analysis.csv")
-    
-    # Update results with final metrics
-    results.update({
-        "final_oof_auc": float(final_auc),
-        "final_oof_ap": float(final_ap),
-        "summary_metrics": summary
-    })
-    
-    dump_json(results, Path(args.out_dir) / "final_results.json")
-    
-    # Log final results to wandb
-    if use_wandb:
-        wandb.log({
-            "best_cv_auc": best_score,
-            "final_oof_auc": final_auc,
-            "final_oof_ap": final_ap,
-            "gini": summary["gini"],
-            "ks_stat": summary["ks"]
-        })
-        wandb.finish()
-    
-    print(f"\nAll results saved to: {args.out_dir}")
-    print(f"Best parameters saved to: {args.out_dir}/best_params.json")
-
-if __name__ == "__main__":
-    main()
diff --git a/src/train_mlp_stack.py b/src/train_mlp_stack.py
deleted file mode 100644
index 02c4bdf..0000000
--- a/src/train_mlp_stack.py
+++ /dev/null
@@ -1,99 +0,0 @@
-# train_mlp_stack.py
-import json, numpy as np, pandas as pd
-from pathlib import Path
-from tqdm import tqdm
-from sklearn.model_selection import StratifiedKFold
-from sklearn.neural_network import MLPClassifier
-from sklearn.pipeline import Pipeline
-from sklearn.preprocessing import StandardScaler
-from sklearn.linear_model import LogisticRegression
-from sklearn.metrics import roc_auc_score, average_precision_score
-
-from .metrics import summarize_all
-from .io_utils import load_xy, dump_json
-
-def cv_oof(model, X, y, n_splits=5, seed=42):
-    skf = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=seed)
-    oof = np.zeros(len(y))
-    for tr, va in skf.split(X, y):
-        m = model()
-        m.fit(X.iloc[tr], y[tr])
-        p = m.predict_proba(X.iloc[va])[:,1]
-        oof[va] = p
-    return oof
-
-def make_mlp():
-    return Pipeline([
-        ("scaler", StandardScaler(with_mean=True, with_std=True)),
-        ("clf", MLPClassifier(
-            hidden_layer_sizes=(128,64),
-            activation="relu",
-            alpha=1e-4, batch_size=256,
-            learning_rate_init=1e-3,
-            max_iter=80, random_state=42, verbose=False))
-    ])
-
-def make_xgb(best_params=None):
-    import xgboost as xgb
-    params = dict(
-        objective="binary:logistic",
-        eval_metric="auc",
-        tree_method="hist",
-        n_estimators=1200,
-        eta=0.05, max_depth=6, subsample=0.8, colsample_bytree=0.8,
-        reg_alpha=0.1, reg_lambda=0.5,
-        random_state=42, early_stopping_rounds=200
-    )
-    if best_params:
-        params.update(best_params)
-        params.pop("scale_pos_weight", None)  # we’ll re-fit without early-stop meta params
-    def _factory():
-        return xgb.XGBClassifier(**params)
-    return _factory
-
-def main():
-    import argparse
-    ap = argparse.ArgumentParser()
-    ap.add_argument("--data-root", default="data")
-    ap.add_argument("--out-dir", default="model_outputs/stack")
-    ap.add_argument("--best-xgb-params", default="model_outputs/gbdt_sweep/best_params.json")
-    ap.add_argument("--n-splits", type=int, default=5)
-    ap.add_argument("--seed", type=int, default=42)
-    args = ap.parse_args()
-
-    Path(args.out_dir).mkdir(parents=True, exist_ok=True)
-    X, y, target = load_xy(args.data_root)
-
-    best_params = None
-    p = Path(args.best_xgb_params)
-    if p.exists():
-        best_params = json.loads(p.read_text()).get("params", None)
-
-    # 1) OOF from XGB and MLP
-    oof_xgb = cv_oof(make_xgb(best_params), X, y, n_splits=args.n_splits, seed=args.seed)
-    oof_mlp = cv_oof(make_mlp,             X, y, n_splits=args.n_splits, seed=args.seed)
-
-    # 2) Calibrated stacker (Platt)
-    Z = np.column_stack([oof_xgb, oof_mlp])
-    cal = LogisticRegression(max_iter=1000).fit(Z, y)
-    oof_stack = cal.predict_proba(Z)[:,1]
-
-    # 3) Metrics & artifacts
-    rows = []
-    for name, vec in [("xgb", oof_xgb), ("mlp", oof_mlp), ("stack", oof_stack)]:
-        smry, dec = summarize_all(y, vec, label=name)
-        dec.to_csv(Path(args.out_dir)/f"deciles_{name}.csv", index=False)
-        rows.append({"model": name, **smry})
-
-    pd.DataFrame({"oof_xgb": oof_xgb, "oof_mlp": oof_mlp, "oof_stack": oof_stack, "y": y})\
-      .to_csv(Path(args.out_dir)/"oof_predictions.csv", index=False)
-
-    pd.DataFrame(rows).to_csv(Path(args.out_dir)/"summary.csv", index=False)
-    dump_json({"coef": cal.coef_.ravel().tolist(), "intercept": float(cal.intercept_[0])},
-              Path(args.out_dir)/"stacker_logit.json")
-
-    print(pd.DataFrame(rows).to_string(index=False))
-    print(f"\nArtifacts → {args.out_dir}")
-
-if __name__ == "__main__":
-    main()
diff --git a/submit_risk_sweep_job.sh b/submit_risk_sweep_job.sh
index 2c96f10..2c94ca9 100755
--- a/submit_risk_sweep_job.sh
+++ b/submit_risk_sweep_job.sh
@@ -51,7 +51,7 @@ echo "Expected runtime: 8-12 hours"
 
 # Install additional packages if needed
 echo "=== Checking dependencies ==="
-pip install --user -q optuna wandb
+pip install --user -q wandb
 
 echo "=== Starting Risk Model Sweep ==="
 bash scripts/run_risk_model_sweep.sh "$ALGO" "$TRIALS"
@@ -70,16 +70,16 @@ if [[ $sweep_exit_code -eq 0 ]]; then
     echo "📊 Results Summary:"
     
     # Display key results if available
-    if [[ -f "model_outputs/gbdt_sweep_${ALGO}/final_results.json" ]]; then
+    if [[ -f "model_outputs/gbdt_sweep_${ALGO}/best_params.json" ]]; then
         echo "GBDT Optimization Results:"
         python -c "
 import json
 try:
-    with open('model_outputs/gbdt_sweep_${ALGO}/final_results.json', 'r') as f:
+    with open('model_outputs/gbdt_sweep_${ALGO}/best_params.json', 'r') as f:
         results = json.load(f)
-    print(f'  Best CV AUC: {results[\"best_score\"]:.6f}')
-    print(f'  Final OOF AUC: {results.get(\"final_oof_auc\", \"N/A\")}')
-    print(f'  Final OOF AP: {results.get(\"final_oof_ap\", \"N/A\")}')
+    print(f'  Best Trial: #{results[\"trial\"]}')
+    print(f'  Best AUC: {results[\"auc\"]:.6f}')
+    print(f'  Best AP: {results[\"ap\"]:.6f}')
 except Exception as e:
     print(f'  Could not parse results: {e}')
 "
